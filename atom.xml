<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>R</title>
  
  
  <link href="https://rorschachandbat.github.io/atom.xml" rel="self"/>
  
  <link href="https://rorschachandbat.github.io/"/>
  <updated>2024-11-30T06:37:52.212Z</updated>
  <id>https://rorschachandbat.github.io/</id>
  
  <author>
    <name>R</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>随机地图生成器</title>
    <link href="https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9A%8F%E6%9C%BA%E5%9C%B0%E5%9B%BE%E7%94%9F%E6%88%90%E5%99%A8/"/>
    <id>https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9A%8F%E6%9C%BA%E5%9C%B0%E5%9B%BE%E7%94%9F%E6%88%90%E5%99%A8/</id>
    <published>2024-04-26T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.212Z</updated>
    
    
    <summary type="html">Unity知识</summary>
    
    
    
    <category term="找工作" scheme="https://rorschachandbat.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>面经-Unity相关</title>
    <link href="https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9D%A2%E7%BB%8F-Unity%E7%9B%B8%E5%85%B3/"/>
    <id>https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9D%A2%E7%BB%8F-Unity%E7%9B%B8%E5%85%B3/</id>
    <published>2024-04-11T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Unity生命周期"><a href="#Unity生命周期" class="headerlink" title="Unity生命周期"></a>Unity生命周期</h1><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/20201004160417460.png" alt="生命周期"></p><p><strong>1、静态构造函数</strong><br>当程序集被加载的时候就被调用了，如果你的unity处于编辑状态时，此时你保存一个脚本（从而迫使重新编译），静态构造函数会立即被调用，因为unity加载了DLL。并且它将不会再次运行，永远只会执行一次，unity运行时，是不会再次执行了！在一个已部署的游戏上，这个构造器将会在unity加载过程的早期被调用！</p><p><strong>2、Awake</strong><br>只会被调用一次，在Start方法之前被调用！ 主要用于字段值的初始化工作，禁用脚本，创建游戏对象，或者 Resources.Load(Prefab) 对象</p><p><strong>3、Start</strong><br>只执行一次，在Awake方法执行结束后执行，但在Update方法执行前执行， 主要用于程序UI的初始化操作，比如获取游戏对象或者组件</p><p><strong>4、Update</strong><br>每一帧执行的，监听用户输入，播放动画，当机器忙或者性能差的时候，他会停止执行，会产生停顿的感觉，例如一个人本来在1米的位置，突然到了5米的位置上，产生了跳帧，而下面的FixedUpdate方法则相反！会一米一米的去执行！（自己调试发现，Update是先于OnGUI执行的，且执行一次Update之后，会执行两次OnGUI）</p><p><strong>5、FixedUpdate</strong><br>不管当前机器忙不忙，都会保证每一帧执行一次！避免跳帧！固定更新。固定更新常用于移动模型等操作。</p><p><strong>6、LateUpdate</strong><br>先执行Update，然后才去执行lateUpdate(Update方法执行完，必定接着执行LateUpdate，而Update和FixedUpdate方法的执行顺序不确定，而且有时候FIxedUpdate执行了多帧，而Update却只执行了一帧，这就是因为跳帧的缘故造成的（取决于你的机器性能）！)，如果现在有100个脚本，分别有100个 Update()函数，其中只有一个LateUpdate，那么在同一帧中，等待100个Update()执行完后，才执行这一个LateUpdate()。</p><p><strong>7、OnGUI</strong><br>在这里面进行GUI的绘制，且GUI是每帧擦除重绘的！仅仅只是绘制！没有生命周期的概念！所有关于绘制GUI的代码，都要直接或者间接地写到OnGUI方法中！</p><p><strong>8、OnDestroy</strong><br>当前脚本销毁时调用</p><p><strong>9、OnEnable</strong><br>脚本可用时被调用、如果脚本是不可用的，将不会被调用！</p><p><strong>11、OnDisable</strong><br>如果脚本被设置为不可用将会被执行，程序结束时可用的脚本也会执行一次这个方法</p><p>OnEnable 和 OnDisable 只受脚本的可用状态的影响（enabled）,而 OnBecameVisible 和 OnBecameInvisible 是受对象是否可见的影响！即使脚本设置为不可用，OnBecameVisible 和 OnBecameInvisible 也会被执行，主要是看对象是否在场景中显示了！</p><h1 id="垃圾回收（GC）"><a href="#垃圾回收（GC）" class="headerlink" title="垃圾回收（GC）"></a>垃圾回收（GC）</h1><p>参考：<a href="https://blog.csdn.net/worisaa/article/details/64121436">https://blog.csdn.net/worisaa/article/details/64121436</a></p><p>堆栈内存存储较小的数据和时间维度较短的，堆内存相反。</p><ul><li>只要变量处于激活状态，则其占用的内存会被标记为使用状态，则该部分的内存处于被分配的状态，变量要么存储在堆栈内存上，要么处于堆内存上。</li><li>一旦变量不再激活，则其所占用的内存不再需要，该部分内存可以被回收到内存池中被再次使用，这样的操作就是内存回收。处于堆栈上的内存回收及其快速，处于堆上的内存并不是及时回收的，其对应的内存依然会被标记为使用状态。</li></ul><h2 id="堆内存分配和回收机制"><a href="#堆内存分配和回收机制" class="headerlink" title="堆内存分配和回收机制"></a>堆内存分配和回收机制</h2><p>堆内存上的内存分配和存储相对而言更加复杂，主要是堆内存上可以存储短期较小的数据，也可以存储各种类型和大小的数据。其上的内存分配和回收顺序并不可控，可能会要求分配不同大小的内存单元来存储数据。</p><p>堆上的变量在存储的时候，主要分为以下几步：</p><ul><li>首先，unity检测是否有足够的闲置内存单元用来存储数据，如果有，则分配对应的内存单元；</li><li>如果没有足够的存储单元，unity会触发垃圾回收来释放不再被使用的堆内存。这步操作是一步缓慢的操作，如果垃圾回收后有足够的内存单元，则进行内存分配。</li><li>如果垃圾回收后并没有足够的内存单元，则unity会扩展堆内存的大小，这步操作会很缓慢，然后分配对应的内存单元给变量。</li></ul><p>堆内存的分配有可能会变得十分缓慢，特别是需要垃圾回收和堆内存需要扩展的情况下。</p><h2 id="垃圾回收时的操作"><a href="#垃圾回收时的操作" class="headerlink" title="垃圾回收时的操作"></a>垃圾回收时的操作</h2><p>当一个变量不再处于激活状态的时候，其所占用的内存并不会立刻被回收，不再使用的内存只会在GC的时候才会被回收。</p><p>每次运行GC的时候，主要进行下面的操作：</p><ul><li>GC会检查堆内存上的每个存储变量；</li><li>对每个变量会检测其引用是否处于激活状态；</li><li>如果变量的引用不再处于激活状态，则会被标记为可回收；</li><li>被标记的变量会被移除，其所占有的内存会被回收到堆内存上。</li></ul><p>GC操作是一个极其耗费的操作，堆内存上的变量或者引用越多则其运行的操作会更多，耗费的时间越长。</p><h2 id="何时会触发垃圾回收"><a href="#何时会触发垃圾回收" class="headerlink" title="何时会触发垃圾回收"></a>何时会触发垃圾回收</h2><p>主要有三个操作会触发垃圾回收：</p><ul><li>在堆内存上进行内存分配操作而内存不够的时候都会触发垃圾回收来利用闲置的内存；</li><li>GC会自动的触发，不同平台运行频率不一样；</li><li>GC可以被强制执行。</li></ul><h2 id="降低GC的影响的方法"><a href="#降低GC的影响的方法" class="headerlink" title="降低GC的影响的方法"></a><strong>降低GC的影响的方法</strong></h2><p>大体上来说，我们可以通过三种方法来降低GC的影响：</p><ul><li>减少GC的运行次数；</li><li>减少单次GC的运行时间；</li><li>将GC的运行时间延迟，避免在关键时候触发，比如可以在场景加载的时候调用GC</li></ul><p>基于此，我们可以采用三种策略：</p><ul><li>对游戏进行重构，减少堆内存的分配和引用的分配。更少的变量和引用会减少GC操作中的检测个数从而提高GC的运行效率。</li><li>降低堆内存分配和回收的频率，尤其是在关键时刻。也就是说更少的事件触发GC操作，同时也降低堆内存碎片。</li><li>我们可以试着测量GC和堆内存扩展的时间，使其按照可预测的顺序执行。当然这样操作的难度极大，但是这会大大降低GC的影响</li></ul><h2 id="降低GC的具体方法"><a href="#降低GC的具体方法" class="headerlink" title="降低GC的具体方法"></a>降低GC的具体方法</h2><h3 id="减少内存垃圾"><a href="#减少内存垃圾" class="headerlink" title="减少内存垃圾"></a>减少内存垃圾</h3><h4 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h4><p>比如循环不要每次都创建新的数组，而是提前创建好</p><h4 id="不要在频分调用的函数里面使用堆内存分配"><a href="#不要在频分调用的函数里面使用堆内存分配" class="headerlink" title="不要在频分调用的函数里面使用堆内存分配"></a>不要在频分调用的函数里面使用堆内存分配</h4><p>比如tick和update里面不要分配内存，而是在之前就创建好，或者通过定时器或者脏标记的方法来改进</p><h4 id="减少链表"><a href="#减少链表" class="headerlink" title="减少链表"></a>减少链表</h4><h4 id="对象池"><a href="#对象池" class="headerlink" title="对象池"></a>对象池</h4><p>减少内存的释放和创建次数</p><h3 id="造成不必要内存的分配的情况"><a href="#造成不必要内存的分配的情况" class="headerlink" title="造成不必要内存的分配的情况"></a>造成不必要内存的分配的情况</h3><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>在c#里面字符串不是值类型而是引用，而且值无法改变，所以改变值会直接创建一个新的值</p><p>　1）减少不必要的字符串的创建，如果一个字符串被多次利用，我们可以创建并缓存该字符串。</p><p>　　2）减少不必要的字符串操作，例如如果在Text组件中，有一部分字符串需要经常改变，但是其他部分不会，则我们可以将其分为两个部分的组件。</p><p>　　3）如果我们需要实时的创建字符串，我们可以采用StringBuilderClass来代替，StringBuilder专为不需要进行内存分配而设计，从而减少字符串产生的内存垃圾。</p><p>　　4）移除游戏中的Debug.Log()函数的代码，尽管该函数可能输出为空，对该函数的调用依然会执行，该函数会创建至少一个字符（空字符）的字符串。如果游戏中有大量的该函数的调用，这会造成内存垃圾的增加。</p><h4 id="函数调用"><a href="#函数调用" class="headerlink" title="函数调用"></a>函数调用</h4><p>比如说迭代器会产生新的数组（可以通过缓存来解决），调用GameObject.name 或者 GameObject.tag也会有内存垃圾，因为会犯乎一个字符串</p><h4 id="装箱操作"><a href="#装箱操作" class="headerlink" title="装箱操作"></a>装箱操作</h4><p>装箱操作是指一个值类型变量被用作引用类型变量时候的内部变换过程，如果我们向带有对象类型参数的函数传入值类型，这就会触发装箱操作。比如String.Format()函数需要传入字符串和对象类型参数，如果传入字符串和int类型数据，就会触发装箱操作。最好避免。</p><p>比如这种</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-built_in">int</span> cost = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">string</span> displayString = String.Format(<span class="hljs-string">&quot;Price:&#123;0&#125; gold&quot;</span>,cost);<br></code></pre></td></tr></table></figure><h4 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h4><h4 id="函数引用"><a href="#函数引用" class="headerlink" title="函数引用"></a>函数引用</h4><h4 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h4><p>6.5之前的版本会因为迭代器有内存垃圾</p><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><p>比如把对象里面的string拆出来，这样就不用频繁地在GC里面类型检查</p><h3 id="定时执行GC"><a href="#定时执行GC" class="headerlink" title="定时执行GC"></a>定时执行GC</h3><p>比如过场的时候主动调用GC操作</p><h1 id="UI"><a href="#UI" class="headerlink" title="UI"></a>UI</h1><h2 id="ugui"><a href="#ugui" class="headerlink" title="ugui"></a>ugui</h2><h3 id="rebatch和rebuild"><a href="#rebatch和rebuild" class="headerlink" title="rebatch和rebuild"></a>rebatch和rebuild</h3><p><a href="https://zhuanlan.zhihu.com/p/266997416">Unity UI 优化学习总结 - 天欲雪的文章 - 知乎</a></p><p><strong>Canvas</strong>（画布），和名字一样，是 UI 绘制的地方，Unity 的渲染系统用其来提供一个可绘制的分层几何。负责将ui几何合批成适合的网格，提交绘制命令给 Unity 的图形系统，这整个过程叫做 <strong>rebatch</strong> 或者 <strong>batch build</strong>。当 Canvas 其子节点下包含 Canvas Renderer 的节点需要进行 rebatch 的时候，就会被标记为脏。</p><p>Graphic 与 Layout 都依赖于 CanvasUpdateRegistry 类。它会定位 Graphic 与 Layout 是否需要更新并加入更新队列，在所在 Canvas 的 willRenderCanvases 事件被触发时对队列中的对象执行真正的更新。</p><h2 id="图集有什么用，适用场景。"><a href="#图集有什么用，适用场景。" class="headerlink" title="图集有什么用，适用场景。"></a>图集有什么用，适用场景。</h2><p>定义<br>图集是将很多零碎的2D小图整合成一张大图，方便unity渲染合批，降低渲染消耗。</p><p>优势<br>1.UI的合批处理，减少DrawCall</p><p>多张图片需要多次DrawCall，合并成一张大图只需要调用一次DrawCall</p><p>2.减少对内存的占用</p><p>OpenGL每张贴图都需要设置为2的N次方才能使用，假设有宽高分别为100x100、10x10的两张图片，如果不合成大贴图，那么就需要分别使用128x128和16x16的图片，会浪费一部分内存空间。</p><p>如果是使用一张大图的话，就可以将两张图片打到128x128的图集，进而减少内存的占用。</p><p>3.提升效率</p><p>图片尺寸为2的次幂时，GPU处理起来会快很多，小图不可能做不到每张图都是2的次幂的，但打成一张大图就可以。<br><a href="https://blog.csdn.net/z2014z/article/details/119654256">https://blog.csdn.net/z2014z/article/details/119654256</a></p><h2 id="屏幕自适应方案"><a href="#屏幕自适应方案" class="headerlink" title="屏幕自适应方案"></a>屏幕自适应方案</h2><p>canvas scaler</p><p>锚点</p><h1 id="批处理和drawcall"><a href="#批处理和drawcall" class="headerlink" title="批处理和drawcall"></a>批处理和drawcall</h1><p><a href="https://zhuanlan.zhihu.com/p/432223843">Unity渲染优化的4种批处理：静态批处理，动态批处理，SRP Batcher 与 GPU Instancing - acnestis的文章 - 知乎</a></p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/v2-f5b8402d281543a9debe941f9762889a_r.jpg" alt="img"></p><h1 id="常用的Unity-Atrribute"><a href="#常用的Unity-Atrribute" class="headerlink" title="常用的Unity Atrribute"></a>常用的Unity Atrribute</h1><h1 id="笔试题"><a href="#笔试题" class="headerlink" title="笔试题"></a>笔试题</h1><p>unity脚本生命周期函数。</p><p>Lerp作用</p><p>欧拉角计算，Quaternio.Euler。</p><p>常用的Unity Atrribute</p><p>如何判断是否碰到了场景中的物体？</p><p>Coroutine有什么用，优缺点</p><p>发生碰撞的必要条件。</p><p>ugui如何保证分辨率改变ui大小不变。</p><p>C#List底层数据结构，增加和删除时间复杂度。</p><p>结构体和类的区别。</p><p>引用类型和值类型分别有哪些。</p><p>装箱和拆箱是什么，为什么不要频繁适用?</p><p>简单用代码实现一个单例模式。</p><p>观察模式读代码写结构，用在哪里？</p><p>频繁地对字符串进行分割，写一个代码。（就是分数比如说100000，分成100,000这样）</p><p>分批手段和适用场景。</p>]]></content>
    
    
    <summary type="html">Unity知识</summary>
    
    
    
    <category term="找工作" scheme="https://rorschachandbat.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>面经-游戏相关的一些知识</title>
    <link href="https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9D%A2%E7%BB%8F-%E6%B8%B8%E6%88%8F%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/"/>
    <id>https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9D%A2%E7%BB%8F-%E6%B8%B8%E6%88%8F%E7%9B%B8%E5%85%B3%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</id>
    <published>2024-04-10T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="程序框架"><a href="#程序框架" class="headerlink" title="程序框架"></a>程序框架</h1><p><a href="https://www.cnblogs.com/indream/p/3602348.html">从Script到Code Blocks、Code Behind到MVC、MVP、MVVM</a></p><h2 id="ECS"><a href="#ECS" class="headerlink" title="ECS"></a>ECS</h2><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/v2-cc979056c26b13f1e63233776fa9e8ad_720w.webp" alt="img"></p><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/v2-f49989545904a5b8f3338ab64806450e_720w.webp" alt="img"></p><h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/v2-88c91a4203fe50c44ed366de25ee577d_720w.webp" alt="img"></p><h1 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h1><p>一种比较简单计算并且比较自然的曲线的方式，利用插值的方式</p><p>博客教程：<a href="https://www.cnblogs.com/msxh/p/6270468.html">https://www.cnblogs.com/msxh/p/6270468.html</a></p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/798142-20170114161306385-735353264.jpg" alt="img"></p><h1 id="游戏AI"><a href="#游戏AI" class="headerlink" title="游戏AI"></a>游戏AI</h1><p>比较常见的有状态机，行为树，效用系统，目标导向</p><h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a><strong>状态机</strong></h2><p>一个比较简单的改进方案是分层状态机，比如把巡逻的都放在一个大的巡逻里面</p><h2 id="行为树"><a href="#行为树" class="headerlink" title="行为树"></a><strong>行为树</strong></h2><p>行为树是树型结构的，每个节点都代表了一个行为，每个行为都可以有子行为。</p><p>所有行为都有一个先决条件，就是产生的这些行为的条件。</p><p>整个算法先从树的根部开始，然后开始检查每一个先决条件。树的每一层只可以执行一个行为，所以当一个行为正在执行，它的兄弟节点都不会被检查，但是它们的子节点还是要检查的。相反如果一个行为的先决条件当前并不满足，则跳过判断它的子节点，继续判断它的兄弟节点。一个树全部检查完毕之后，决定执行优先级最大的，然后再依次执行每个动作。</p><p>不同于状态机，行为树是无状态的，不需要记下之前执行的行为，只是判断行为该不该执行。</p><p>行为树的节点之间是不相关的，删除或增加节点，对其他节点都无影响。所以，可扩展性也是行为树的一个优势。另外还可以为决策树添加灵活性与随机性，父节点可以随机决定是否检查子节点。</p><ul><li>序列（Sequence）节点：顺序执行所有子节点返回成功，如果某个子节点失败返回失败。</li><li>循环（Loop）节点：循环执行子节点到指定次数后返回成功，如果循环次数为-1，则无限循环。</li><li>条件（Condition）节点：根据条件的比较结果，返回成功或失败。</li><li>动作（Action）节点：根据动作结果返回成功，失败，或运行。</li><li>等待（Wait）节点：当指定的时间过去后返回成功。</li></ul><p><img src="https://pic4.zhimg.com/80/v2-c4b17080b7a4f12e765fc52edbfbdd4f_720w.webp" alt="img"></p><h2 id="效用系统"><a href="#效用系统" class="headerlink" title="效用系统"></a><strong>效用系统</strong></h2><p>所以有些情况，只是做这些布尔判断是不合适的，会遗漏很多情况，判断也不妥当。比如：我们可能需要同时考虑与敌人的距离、有多少弹药、饥饿程度、HP值，等等。这些判断条件能映射出许多动作，比我们单一的判断做不做这个动作要好很多。utility-based system，基于效用的系统，会根据权重、比率、队列和许多需要考虑的事项来做出最优选择，使AI比普通的行为树更有头脑。根据上面的例子，使用效用系统我们的AI可以做出我们想要的动作，并根据当前情况做出不同强度的动作，使AI真实、更具可能性，也不再是只有一个正确的选择了。决策树就是对AI说，“只是你将要做的一个行为”，效用系统就是对AI说：“这些是你可能要做的行为”</p><h2 id="目标导向型"><a href="#目标导向型" class="headerlink" title="目标导向型"></a><strong>目标导向型</strong></h2><p>GOAP来源于STRIPS方法，这两种都是让AI创造他们自己的方法去解决问题，我们提供给它一系列可能的动作作为对这个世界的描述，和每个动作使用的先决条件，和行动带来的影响。AI拥有一个初始状态和他需要达到的目标。有一组目标，AI可以通过优先级或当前状态选择一个。计划系统决定一个动作序列来满足当前目标，计划出一个像路径一样的能最简单达到目标状态的动作序列。</p><p>GOAP是一个反向链接搜索，从要实现的目标开始，找到什么动作能实现目标，在寻找刚才动作的先决条件，一直往前推，知道达到你的当前（初始）状态。这种反向链接搜索替代了启发式的前向链接搜索。</p><h1 id="网络同步"><a href="#网络同步" class="headerlink" title="网络同步"></a>网络同步</h1><p><a href="https://blog.codingnow.com/2018/08/lockstep.html">lockstep 网络游戏同步方案-云风blog</a></p><p><a href="https://zhuanlan.zhihu.com/p/130702310">细谈网络同步在游戏历史中的发展变化（上） - 网易游戏雷火事业群的文章 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/164686867">细谈网络同步在游戏历史中的发展变化（中） - 网易游戏雷火事业群的文章 - 知乎</a></p><p><a href="https://zhuanlan.zhihu.com/p/336869551">细谈网络同步在游戏历史中的发展变化（下） - 网易游戏雷火事业群的文章 - 知乎</a></p><h1 id="寻路"><a href="#寻路" class="headerlink" title="寻路"></a>寻路</h1><h2 id="A"><a href="#A" class="headerlink" title="A*"></a>A*</h2><h3 id="描述一下A-算法"><a href="#描述一下A-算法" class="headerlink" title="描述一下A*算法"></a>描述一下A*算法</h3><ol><li>把起点加入 open list 。</li><li>重复如下过程：</li></ol><p>a.         遍历 open list ，查找 F 值最小的节点，把它作为当前要处理的节点。</p><p>b.         把这个节点移到 close list 。</p><p>c.         对当前方格的 8 个相邻方格的每一个方格？</p><p>◆     如果它是不可抵达的或者它在 close list 中，忽略它。否则，做如下操作。</p><p>◆     如果它不在 open list 中，把它加入 open list ，并且把当前方格设置为它的父亲，记录该方格的 F ， G 和 H 值。</p><p>◆     如果它已经在 open list 中，检查这条路径 ( 即经由当前方格到达它那里 ) 是否更好，用 G 值作参考。更小的 G 值表示这是更好的路径。如果是这样，把它的父亲设置为当前方格，并重新计算它的 G 和 F 值。如果你的 open list 是按 F 值排序的话，改变后你可能需要重新排序。</p><p>d.    停止条件</p><p>◆     把终点加入到了 open list 中，此时路径已经找到了，或者</p><p>◆     查找终点失败，并且 open list 是空的，此时没有路径。</p><ol start="3"><li>保存路径。从终点开始，每个方格沿着父节点移动直至起点，这就是你的路径。</li></ol><p>F &#x3D; G + H</p><p>这里，</p><p>G &#x3D; 从起点 A 移动到指定方格的移动代价，沿着到达该方格而生成的路径。</p><p>H &#x3D; 从指定的方格移动到终点 B 的估算成本。这个通常被称为试探法，有点让人混淆。为什么这么叫呢，因为这是个猜测。直到我们找到了路径我们才会知道真正的距离，因为途中有各种各样的东西 ( 比如墙壁，水等 ) 。</p><h3 id="openlist和closelist的作用？"><a href="#openlist和closelist的作用？" class="headerlink" title="openlist和closelist的作用？"></a>openlist和closelist的作用？</h3><p>openlist就是还要搜索的列表，相比于dfs的盲目搜索更加有效率，</p><p>closelist就是已经搜过的或者不可搜的节点，加速过程。</p><h1 id="红点系统"><a href="#红点系统" class="headerlink" title="红点系统"></a>红点系统</h1><p><a href="https://zhuanlan.zhihu.com/p/85978429">Unity手游实战：从0开始SLG——独立功能扩展（三）用树实现客户端红点系统 - 放牛的星星的文章 - 知乎</a></p><p>规划红点系统的时候，我们将整个系统分为独立的三个部分：结构层、驱动层和表现层。</p><p>结构层用来部署红点的层级结构，使用树结构。</p><p>驱动层是指，如何驱动这个树结构产生状态变化，以及状态变化之后如何将变化的行为通知到指定的表现层，在一定的程度上将数据和表现分离开。</p><p>表现层就专门承担表现的职责，比如有的红点就是一个单纯的红点，有的需要显示数字，有的可能是图标晃动，有的是显示new标签，有的是播放特效等等。这些都可以归属在表现层统一去管控。</p><h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p><a href="https://zhuanlan.zhihu.com/p/23821422">【游戏设计模式】之四 《游戏编程模式》全书内容提炼总结 - 毛星云的文章 - 知乎</a></p><p><a href="https://gpp.tkchu.me/architecture-performance-and-games.html">游戏设计模式</a></p><p>要结合项目中能用到的东西来记忆 </p><h2 id="一、常用GOF设计模式"><a href="#一、常用GOF设计模式" class="headerlink" title="一、常用GOF设计模式"></a>一、常用GOF设计模式</h2><h3 id="1-命令模式"><a href="#1-命令模式" class="headerlink" title="1.命令模式"></a>1.命令模式</h3><h3 id="2-享元模式"><a href="#2-享元模式" class="headerlink" title="2.享元模式"></a>2.享元模式</h3><h3 id="3-观察者模式"><a href="#3-观察者模式" class="headerlink" title="3.观察者模式"></a>3.观察者模式</h3><h3 id="4-原型模式"><a href="#4-原型模式" class="headerlink" title="4.原型模式"></a>4.原型模式</h3><h3 id="5-单例模式"><a href="#5-单例模式" class="headerlink" title="5.单例模式"></a>5.单例模式</h3><h3 id="6-状态模式"><a href="#6-状态模式" class="headerlink" title="6.状态模式"></a>6.状态模式</h3><h2 id="二、序列型模式"><a href="#二、序列型模式" class="headerlink" title="二、序列型模式"></a>二、序列型模式</h2><h3 id="7-双缓冲模式"><a href="#7-双缓冲模式" class="headerlink" title="7.双缓冲模式"></a>7.双缓冲模式</h3><h3 id="8-游戏循环"><a href="#8-游戏循环" class="headerlink" title="8.游戏循环"></a>8.游戏循环</h3><h3 id="9-更新方法"><a href="#9-更新方法" class="headerlink" title="9.更新方法"></a>9.更新方法</h3><h2 id="三、行为型模式"><a href="#三、行为型模式" class="headerlink" title="三、行为型模式"></a>三、行为型模式</h2><h3 id="10-字节码"><a href="#10-字节码" class="headerlink" title="10.字节码"></a>10.字节码</h3><h3 id="11-子类沙箱"><a href="#11-子类沙箱" class="headerlink" title="11.子类沙箱"></a>11.子类沙箱</h3><h3 id="12-类型对象"><a href="#12-类型对象" class="headerlink" title="12.类型对象"></a>12.类型对象</h3><h2 id="四、解耦型模式"><a href="#四、解耦型模式" class="headerlink" title="四、解耦型模式"></a>四、解耦型模式</h2><p>这个更加像是写代码的方法论。</p><h3 id="13-组件模式"><a href="#13-组件模式" class="headerlink" title="13.组件模式"></a>13.组件模式</h3><h3 id="14-事件队列"><a href="#14-事件队列" class="headerlink" title="14.事件队列"></a>14.事件队列</h3><h3 id="15-服务定位器"><a href="#15-服务定位器" class="headerlink" title="15.服务定位器"></a>15.服务定位器</h3><h2 id="五、优化型模式"><a href="#五、优化型模式" class="headerlink" title="五、优化型模式"></a>五、优化型模式</h2><p>这个可能更偏向于应用。</p><h3 id="16-数据局部性"><a href="#16-数据局部性" class="headerlink" title="16.数据局部性"></a>16.数据局部性</h3><h3 id="17-脏标识模式"><a href="#17-脏标识模式" class="headerlink" title="17.脏标识模式"></a>17.脏标识模式</h3><p>有一些更新很需要花时间的数据，每次循环的时候，加一个标志，如果没有改变就不tick这里。</p><h3 id="18-对象池模式"><a href="#18-对象池模式" class="headerlink" title="18.对象池模式"></a>18.对象池模式</h3><h3 id="19-空间分区"><a href="#19-空间分区" class="headerlink" title="19.空间分区"></a>19.空间分区</h3>]]></content>
    
    
    <summary type="html">一些乱七八糟的东西</summary>
    
    
    
    <category term="找工作" scheme="https://rorschachandbat.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>面经-刷题语法和一些经典算法题思路</title>
    <link href="https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9D%A2%E7%BB%8F-%E5%88%B7%E9%A2%98%E8%AF%AD%E6%B3%95%E5%92%8C%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98%E6%80%9D%E8%B7%AF/"/>
    <id>https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9D%A2%E7%BB%8F-%E5%88%B7%E9%A2%98%E8%AF%AD%E6%B3%95%E5%92%8C%E4%B8%80%E4%BA%9B%E7%BB%8F%E5%85%B8%E7%AE%97%E6%B3%95%E9%A2%98%E6%80%9D%E8%B7%AF/</id>
    <published>2024-04-09T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h1><p><strong>分割分号</strong></p><p>  stringstream ss(s);</p><p>  while(getline(ss,t,’;’))</p><p><strong>正则</strong></p><p>​    string temp &#x3D; t.substr(1);</p><p>​    if(regex_match(temp, regex(“[0-9]*”))){</p><p>}</p><p><strong>cout输出格式</strong></p><p>  cout &lt;&lt; setiosflags(ios::fixed);</p><p>  cout.precision(2);   </p><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a><strong>二分查找</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Binary</span><span class="hljs-params">(vector&lt;<span class="hljs-type">int</span>&gt; ary, <span class="hljs-type">int</span> target)</span></span>&#123;<br>    <span class="hljs-type">int</span> n = ary.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    <span class="hljs-type">int</span> left = <span class="hljs-number">0</span>, right = n - <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> mid;<br>    <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>        mid = (left + right) / <span class="hljs-number">2</span>;<br>        <span class="hljs-type">int</span> m = ary[mid];<br>        <span class="hljs-keyword">if</span>(m==target) <span class="hljs-keyword">return</span> mid;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(m&lt;target) left = mid + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> right = mid - <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="快排"><a href="#快排" class="headerlink" title="快排"></a><strong>快排</strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,a[<span class="hljs-number">1000001</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">qsort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span><span class="hljs-comment">//应用二分思想</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> mid=a[(l+r)/<span class="hljs-number">2</span>];<span class="hljs-comment">//中间数</span><br>    <span class="hljs-type">int</span> i=l,j=r;<br>    <span class="hljs-keyword">do</span>&#123;<br>        <span class="hljs-keyword">while</span>(a[i]&lt;mid) i++;<span class="hljs-comment">//查找左半部分比中间数大的数</span><br>        <span class="hljs-keyword">while</span>(a[j]&gt;mid) j--;<span class="hljs-comment">//查找右半部分比中间数小的数</span><br>        <span class="hljs-keyword">if</span>(i&lt;=j)<span class="hljs-comment">//如果有一组不满足排序条件（左小右大）的数</span><br>        &#123;<br>            <span class="hljs-built_in">swap</span>(a[i],a[j]);<span class="hljs-comment">//交换</span><br>            i++;<br>            j--;<br>        &#125;<br>    &#125;<span class="hljs-keyword">while</span>(i&lt;=j);<span class="hljs-comment">//这里注意要有=</span><br>    <span class="hljs-keyword">if</span>(l&lt;j) <span class="hljs-built_in">qsort</span>(l,j);<span class="hljs-comment">//递归搜索左半部分</span><br>    <span class="hljs-keyword">if</span>(i&lt;r) <span class="hljs-built_in">qsort</span>(i,r);<span class="hljs-comment">//递归搜索右半部分</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">qsort</span>(<span class="hljs-number">1</span>,n);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cout&lt;&lt;a[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="椭球公式"><a href="#椭球公式" class="headerlink" title="椭球公式"></a><strong>椭球公式</strong></h2><p>x2 &#x2F; a2+y2 &#x2F; b2+z2 &#x2F; c2&#x3D;1。</p><p>当x^2&#x2F;a^2+y^2&#x2F;b^2+z^2&#x2F;c^2&lt;1时　则点(x,y,z)在内部</p><h2 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a><strong>反转链表</strong></h2><h2 id="删除导数第N个数"><a href="#删除导数第N个数" class="headerlink" title="删除导数第N个数"></a><strong>删除导数第N个数</strong></h2><p>总体很简单，有两个特殊的需要注意，第一是只有一个数或者零个数，第二个是需要删除的是第一个数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span>(!head || !head -&gt; next) <span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//判断是否只有一个数或者零个数</span><br>ListNode* first = head;<br>ListNode* second = head;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i&lt;n;i++) second = second-&gt;next;<br><span class="hljs-keyword">if</span>(!second) <span class="hljs-keyword">return</span> head-&gt;next; <span class="hljs-comment">//判断是否要删的是第一个数，因为你要是走完发现走到了尽头就说明倒数第N个数是开头，那么久直接返回head-&gt;next就行，用源代码会有bug</span><br></code></pre></td></tr></table></figure><h2 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a><strong>高精度加法</strong></h2><p>一个很妙的不用判断进位并且前面0的处理方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(n1&gt;=<span class="hljs-number">0</span> || n2&gt;=<span class="hljs-number">0</span> || jw)&#123;<br>    <span class="hljs-type">int</span> x = n1 &gt;= <span class="hljs-number">0</span> ? num1[n1] - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> y = n2 &gt;= <span class="hljs-number">0</span> ? num2[n2] - <span class="hljs-string">&#x27;0&#x27;</span> : <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h2 id="n变成1"><a href="#n变成1" class="headerlink" title="n变成1"></a><strong>n变成1</strong></h2><p>n如果是奇数就变成n-1或者n+1，如果是偶数就变成n&#x2F;2</p><p>用动态规划</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c++">vector&lt;<span class="hljs-type">int</span>&gt; dp;<br>dp[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br>dp[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i&lt;n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>) dp[i] = dp[i/<span class="hljs-number">2</span>] +<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> dp[i] = <span class="hljs-built_in">min</span>(dp[i<span class="hljs-number">-1</span>],dp[i+<span class="hljs-number">1</span>]) + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> dp[n];<br></code></pre></td></tr></table></figure><h2 id="寻找第k大"><a href="#寻找第k大" class="headerlink" title="寻找第k大"></a><strong>寻找第k大</strong></h2><p>（1）基于快排，每轮划分选择一个基准值，把比它小的数放在左边，大的放在右边，函数返回基准值的位置，如果该位置恰好是K，就说明了这是第K小的数，所以从0-基准值位置的数是序列中的前K小数。若返回基准值的位置小于或者大于K，再进行相应调整：如果返回的基准值大于k，在基准值左边序列查找，如果小于，在基准值右边进行查找。递归地进行快排，直到返回的结果&#x3D;K；时间复杂度为O(n)。</p><p>（2）基于堆排序，求前K个最小的数用最大顶堆，求前K个最大的数用最小顶堆。以最大顶堆为例，要维护一个大小为K的顶堆，就是先将K个数插入堆中，随后，对每一个数，与堆顶的最大元素比较，若该数比堆顶元素小，则替换掉堆顶元素，然后调整堆，若大于堆顶元素，则不管，那么将所有元素比较和插入后，该堆维护的就是最小的K个数。求前k小的数用最大顶堆的目的(原理）：这是一种局部淘汰的思想，尽量的把小的数都放在堆中，最后使得即使堆中最大的数，也比外界的所有数都小，就达到了目的。</p><h2 id="洗牌算法"><a href="#洗牌算法" class="headerlink" title="洗牌算法"></a><strong>洗牌算法</strong></h2><p>遍历1到n，生成一个随机数，然后把当前位置的和生成位置的交换，复杂度O（n）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;分割分号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;  stringstream ss(s);&lt;/p&gt;
&lt;p&gt;  while(getl</summary>
      
    
    
    
    <category term="找工作" scheme="https://rorschachandbat.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>面经-计算机基础</title>
    <link href="https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9D%A2%E7%BB%8F-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
    <id>https://rorschachandbat.github.io/%E6%89%BE%E5%B7%A5%E4%BD%9C/%E9%9D%A2%E7%BB%8F-%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</id>
    <published>2024-03-25T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.523Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><h3 id="incline"><a href="#incline" class="headerlink" title="incline"></a>incline</h3><p>inline是先将内联函数编译完成⽣成了函数体直接插⼊被调⽤的地⽅，减少了压栈，跳转和返回的操作。没有普通函数调⽤时的额外开销；</p><p>内联函数是⼀种特殊的函数，会进行类型检查；对编译器的⼀种请求，编译器有可能拒绝这种请求； </p><p>C++中inline编译限制：</p><ol><li>不能存在任何形式的循环语句</li><li>不能存在过多的条件判断语句</li><li>函数体不能过于庞⼤</li><li>内联函数声明必须在调⽤语句之前</li></ol><h3 id="static"><a href="#static" class="headerlink" title="static"></a>static</h3><ol><li>修饰变量<br>修改了变量的作用域和生命周期，存储在静态区域。生命周期和程序相同，作用域分为全局变量和局部变量。局部变量仅在函数内可用，全局变量仅在当前源文件中可用。</li><li>修饰函数<br>表明函数的作用域仅在当前源文件中。</li><li>修饰成员变量<br>静态成员变量为全局类对象所共享，仅有一份拷贝。类中声明，类外定义和初始化。</li><li>修饰成员函数<br>静态成员函数为全局类对象所共享。没有this指针，仅能访问静态成员变量和函数，虚函数不能为静态成员函数。【虚函数运行时绑定，静态成员函数编译时绑定】</li></ol><h3 id="extern"><a href="#extern" class="headerlink" title="extern"></a>extern</h3><ol><li><p>修饰变量：变量声明，表明变量在此处引用，在其他源文件中定义。</p></li><li><p>修饰函数：表明函数在其他源文件中定义。</p></li><li><p>extern “C”：编译器用C的命名规范去编译函数，链接器用C的命名规范进行链接。因为C++支持函数重载，而C不支持。</p><p>例如，假设某个函数的原型为：void</p><p>foo( int x, int y);该函数被C编译器编译后在符号库中的名字为 _ foo，而C++编译器则会产生像_foo_int_int之类的名字。这样的名字包含了函数名、函数参数数量及类型信息，C++就是靠这种机制来实现函数重载的。</p></li></ol><h3 id="constexpr-和-const"><a href="#constexpr-和-const" class="headerlink" title="constexpr 和 const"></a>constexpr 和 const</h3><p>constexpr：告诉编译器我可以是编译期间可知的，尽情的优化我吧。</p><p>const：告诉程序员没人动得了我，放心的把我传出去；或者放心的把变量交给我，我啥也不动就瞅瞅。</p><p>修饰对象的时候两者之间最基本的区别是：</p><ul><li>const修饰一个对象表示它是常量。这暗示对象一经初始化就不会再变动了，并且允许编译器使用这个特点优化程序。这也防止程序员修改了本不应该修改的对象。</li><li>constexpr是修饰一个常量表达式。但请注意constexpr不是修饰常量表达式的唯一途径。</li></ul><p>修饰函数的时候两者之间最基本的区别是：</p><ul><li>const只能用于非静态成员的函数而不是所有函数。它保证成员函数不修改任何非静态数据。</li><li>constexpr可以用于含参和无参函数。constexpr函数适用于常量表达式，只有在下面的情况下编译器才会接受constexpr函数：                                                        </li><li>1.函数体必须足够简单，除了typedef和静态元素，只允许有return语句。如构造函数只能有初始化列表，typedef和静态元素      (实际上在C++14标准中已经允许定义语句存在于constexpr函数体内了)                                                                       2.参数和返回值必须是字面值类</li></ul><h3 id="sizeof"><a href="#sizeof" class="headerlink" title="sizeof"></a>sizeof</h3><p>sizeof计算的是在栈中分配的内存大小。</p><p>（1） sizeof不计算static变量占的内存；</p><p>（2） 32位系统的指针的大小是4个字节，64位系统的指针是8字节，而不用管指针类型；</p><p>（3） char型占1个字节，int占4个字节，short int占2个字节</p><p>long int占4个字节，float占4字节，double占8字节，string占4字节</p><p>一个空类占1个字节，单一继承的空类占1个字节，虚继承涉及到虚指针所以占4个字节</p><p>（4） 数组的长度：</p><p>若指定了数组长度，则不看元素个数，总字节数&#x3D;数组长度*sizeof（元素类型）</p><p>若没有指定长度，则按实际元素个数类确定</p><p>Ps：若是字符数组，则应考虑末尾的空字符。</p><p>（5） 结构体对象的长度</p><p>在默认情况下，为方便对结构体内元素的访问和管理，当结构体内元素长度小于处理器位数的时候，便以结构体内最长的数据元素的长度为对齐单位，即为其整数倍。若结构体内元素长度大于处理器位数则以处理器位数为单位对齐。</p><p>（6） unsigned影响的只是最高位的意义，数据长度不会改变，所以sizeof（unsigned int）&#x3D;4</p><p>（7） 自定义类型的sizeof取值等于它的类型原型取sizeof</p><p>（8） 对函数使用sizeof，在编译阶段会被函数的返回值的类型代替</p><p>（9） sizeof后如果是类型名则必须加括号，如果是变量名可以不加括号，这是因为sizeof是运算符</p><p>（10） 当使用结构类型或者变量时，sizeof返回实际的大小。当使用静态数组时返回数组的全部大小，sizeof不能返回动态数组或者外部数组的尺寸</p><p><strong>为什么空类大小不是0？</strong></p><p>为了确保两个不同对象的地址不同，必须如此。</p><p>类的实例化是在内存中分配⼀块地址，每个实例在内存中都有独⼀⽆⼆的地址。 </p><p>同样，空类也会实例化，所以编译器会给空类隐含的添加⼀个字节，这样空类实例化后就有独⼀⽆⼆的地址了。 </p><p>所以，空类的sizeof为1，⽽不是0。 </p><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><h3 id="C-如何实现反射？"><a href="#C-如何实现反射？" class="headerlink" title="C++如何实现反射？"></a>C++如何实现反射？</h3><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><h3 id="引用和指针的区别？从底层角度考虑"><a href="#引用和指针的区别？从底层角度考虑" class="headerlink" title="引用和指针的区别？从底层角度考虑"></a>引用和指针的区别？从底层角度考虑</h3><p>引用必须初始化，不能改变引用的指向，从汇编的角度来看，引用就是一个const指针</p><h2 id="智能指针"><a href="#智能指针" class="headerlink" title="智能指针"></a>智能指针</h2><h3 id="C-中的智能指针有哪些，各自有什么作用"><a href="#C-中的智能指针有哪些，各自有什么作用" class="headerlink" title="C++中的智能指针有哪些，各自有什么作用?"></a>C++中的智能指针有哪些，各自有什么作用?</h3><p><a href="http://t.csdnimg.cn/SaXIX">C++智能指针weak_ptr详解</a></p><p>智能指针主要解决一个内存泄露的问题，它可以自动地释放内存空间。因为它本身是一个类，当函数结束的时候会调用析构函数，并由析构函数释放内存空间。智能指针分为共享指针(shared_ptr), 独占指针(unique_ptr)和弱指针(weak_ptr)：</p><p>（1）shared_ptr ，多个共享指针可以指向相同的对象，采用了引用计数的机制，当最后一个引用销毁时，释放内存空间；</p><p>（2）unique_ptr，保证同一时间段内只有一个智能指针能指向该对象（可通过move操作来传递unique_ptr）；</p><p>（3）weak_ptr，用来解决shared_ptr相互引用时的死锁问题，如果说两个shared_ptr相互引用,那么这两个指针的引用计数永远不可能下降为0,资源永远不会释放。它是对对象的一种弱引用，不会增加对象的引用计数，和shared_ptr之间可以相互转化，shared_ptr可以直接赋值给它，它可以通过调用lock函数来获得shared_ptr。</p><h3 id="shared-ptr的实现原理是什么？构造函数、拷贝构造函数和赋值运算符怎么写？"><a href="#shared-ptr的实现原理是什么？构造函数、拷贝构造函数和赋值运算符怎么写？" class="headerlink" title="shared_ptr的实现原理是什么？构造函数、拷贝构造函数和赋值运算符怎么写？"></a>shared_ptr的实现原理是什么？构造函数、拷贝构造函数和赋值运算符怎么写？</h3><p>（1）shared_ptr是通过引用计数机制实现的，引用计数存储着有几个shared_ptr指向相同的对象，当引用计数下降至0时就会自动销毁这个对象；</p><p>（2）具体实现：</p><p>1）构造函数：将指针指向该对象，引用计数置为1；</p><p>2）拷贝构造函数：将指针指向该对象，引用计数++；</p><p>3）赋值运算符：&#x3D;号左边的shared_ptr的引用计数-1，右边的shared_ptr的引用计数+1，如果左边的引用技术降为0，还要销毁shared_ptr指向对象，释放内存空间。</p><h3 id="shareptr引用计数数据类型"><a href="#shareptr引用计数数据类型" class="headerlink" title="shareptr引用计数数据类型"></a>shareptr引用计数数据类型</h3><p>long</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="多态的原理"><a href="#多态的原理" class="headerlink" title="多态的原理"></a>多态的原理</h3><h3 id="静态多态和动态多态的区别？"><a href="#静态多态和动态多态的区别？" class="headerlink" title="静态多态和动态多态的区别？"></a>静态多态和动态多态的区别？</h3><p><strong>何为静态多态</strong>？</p><p>又称编译期多态，即在系统编译期间就可以确定程序将要执行哪个函数。例如：函数重载，通过类成员运算符指定的运算。</p><p><strong>何为动态多态？</strong></p><p>动态多态是利用虚函数实现运行时的多态，即在系统编译的时候并不知道程序将要调用哪一个函数，只有在运行到这里的时候才能确定接下来会跳转到哪一个函数。<br>动态多态是在虚函数的基础上实现的，而实现的条件有：<br>(1) 在类中声明为虚函数</p><p>(2) 函数的函数名，返回值，函数参数个数，参数类型，全都与基类的所声明的虚函数相同（否则是函数重载的条件）</p><p>(3) 将子类对象的指针（或以引用形式）赋值给父类对象的指针（或引用），再用该指向父类对象的指针（或引用）调用虚函数<br>如此，便可以实现动态多态，程序会按照实际对象类型来选择要实行的函数具体时哪一个。</p><h2 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h2><h3 id="虚函数表"><a href="#虚函数表" class="headerlink" title="虚函数表"></a>虚函数表</h3><p><a href="https://www.zhihu.com/question/23971699/answer/2358595798">c++虚函数的作用是什么？ - 心试的回答 - 知乎</a></p><p>每个子类会生成一个虚函数表，根据这个子类有无重写父类的虚函数，重写了会覆盖对应的内存空间</p><p>一个继承一个比较好理解，一个继承了多个可以看下面的图</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/v2-04eed39e986d359dcdd32ac2b8c5e658_720w.webp" alt="img"></p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/v2-01056f4f051d715cc5de57314b0e9ba1_720w.webp" alt="img"></p><p>每一个类会有一个虚函数表，然后这个类的多个对象都会共享这一张虚函数表，新创建的对象会保存虚函数指针。</p><h3 id="纯虚函数和抽象类"><a href="#纯虚函数和抽象类" class="headerlink" title="纯虚函数和抽象类"></a>纯虚函数和抽象类</h3><p><strong>纯虚函数是指在基类中定义的没有实现的虚函数</strong>。使用纯虚函数可以使该函数只有<a href="https://www.zhihu.com/search?q=%E5%87%BD%E6%95%B0%E5%8E%9F%E5%9E%8B&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%22629281871%22%7D">函数原型</a>，而没有具体的实现。注：这里的“&#x3D;0”表示该函数为纯虚函数。</p><p>纯虚函数的作用是让子类必须实现该函数，并且不能直接创建该类对象（即该类为抽象类）。</p><p><strong>抽象类是包含纯虚函数的类</strong>，它们不能被实例化，只能被继承。抽象类只能用作其他类的基类。如果一个类继承了抽象类，则必须实现所有的纯虚函数，否则该类也会成为抽象类。</p><h3 id="哪些函数不能声明成虚函数？"><a href="#哪些函数不能声明成虚函数？" class="headerlink" title="哪些函数不能声明成虚函数？"></a>哪些函数不能声明成虚函数？</h3><p><strong>非成员函数</strong></p><p>非成员函数只能被重载(overload)，不能被继承(override)，而虚函数主要的作用是在继承中实现动态多态，非成员函数早在编译期间就已经绑定函数了，无法实现动态多态，那声明成虚函数还有什么意义呢？</p><p><strong>构造函数</strong></p><p>要想调用虚函数必须要通过“虚函数表”来进行的，但虚函数表是要在对象实例化之后才能够进行调用。而在构造函数运行期间，还没有为虚函数表分配空间，自然就没法调用虚函数了。</p><p>友元函数</p><p><strong>静态成员函数</strong></p><p>静态成员函数对于每个类来说只有一份，所有的对象都共享这一份代码，它是属于类的而不是属于对象。虚函数必须根据对象类型才能知道调用哪一个虚函数，故虚函数是一定要在对象的基础上才可以的，两者一个是与实例相关，一个是与类相关。</p><p><strong>内联成员函数</strong></p><p>内联函数是为了在代码中直接展开，减少函数调用花费的代价，虚函数是为了在继承后对象能够准确的执行自己的动作，并且inline函数在编译时被展开，虚函数在运行时才能动态地绑定函数。</p><h3 id="虚析构函数有什么作用？"><a href="#虚析构函数有什么作用？" class="headerlink" title="虚析构函数有什么作用？"></a>虚析构函数有什么作用？</h3><p>在Effective C++ 中，Scott Meyers在《条款07:为多态基类声明virtual析构函数》中提到，当derived class对象经由一个base class指针被删除，而该base class带着一个non-virtual析构函数，其结果未有定义——实际执行时通常发生的是对象的derived成分没有被销毁。也就是说，如果派生类继承了父类的情况下，如果父类的析构函数不是虚函数，而在使用中用了多态的写法，就会导致没有调用到派生类的析构函数，导致资源没有释放，造成泄漏。</p><p>总的来说虚析构函数是为了避免内存泄露，而且是当子类中会有指针成员变量时才会使用得到的。也就说<strong>虚析构函数使得在删除指向子类对象的基类指针时可以调用子类的析构函数达到释放子类中堆内存的目的，而防止内存泄露的</strong>。<br> （1）<strong>如果父类的析构函数不加virtual关键字</strong><br> 当父类的析构函数不声明成虚析构函数的时候，当子类继承父类，父类的指针指向子类时，delete掉父类的指针，只调动父类的析构函数，而不调动子类的析构函数。<br> （2）<strong>如果父类的析构函数加virtual关键字</strong><br> 当父类的析构函数声明成虚析构函数的时候，当子类继承父类，父类的指针指向子类时，delete掉父类的指针，先调动子类的析构函数，再调动父类的析构函数。</p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="内存空间有哪些分类？"><a href="#内存空间有哪些分类？" class="headerlink" title="内存空间有哪些分类？"></a>内存空间有哪些分类？</h3><p>（1）堆，使用malloc、free动态分配和释放空间，能分配较大的内存；</p><p>（2）栈，为函数的局部变量分配内存，能分配较小的内存；</p><p>（3）全局&#x2F;静态存储区，用于存储全局变量和静态变量；</p><p>（4）常量存储区，专门用来存放常量；</p><p>（5）自由存储区：通过new和delete分配和释放空间的内存，具体实现可能是堆或者内存池。</p><h3 id="malloc和new有什么区别？"><a href="#malloc和new有什么区别？" class="headerlink" title="malloc和new有什么区别？"></a>malloc和new有什么区别？</h3><p>（1）new分配内存空间无需指定分配内存大小，malloc需要；</p><p>（2）new返回类型指针，类型安全，malloc返回void*，再强制转换成所需要的类型；</p><p>（3）new是从自由存储区获得内存，malloc从堆中获取内存；</p><p>（4）对于类对象，new会调用构造函数和析构函数，malloc不会（核心）。</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/image-20220309220924444.png" alt="image-20220309220924444"></p><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="构造函数分类"><a href="#构造函数分类" class="headerlink" title="构造函数分类"></a>构造函数分类</h3><ol><li><p>默认构造函数（Default Constructor）：没有参数的构造函数。如果在类中没有定义构造函数，编译器会自动生成一个默认构造函数。默认构造函数用于创建对象时进行默认的初始化操作。</p></li><li><p>参数化构造函数（Parameterized Constructor）：带有参数的构造函数。参数化构造函数可以接受不同的参数，并根据参数的值来初始化对象的数据成员。</p></li><li><p>拷贝构造函数：使用一个对象初始化另一个对象。拷贝构造函数的参数为同类对象的引用。它将被复制的对象的数据成员值复制给新创建的对象。</p></li><li><p>移动构造函数（Move Constructor）：C++11引入的特性，用于实现对象的移动语义。移动构造函数通过接管另一个对象的资源而避免进行深拷贝，提高了性能。</p></li></ol><h3 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h3><p>传入右值，直接浅拷贝，右值用std::move来生成</p><h2 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h2><h3 id="stl底层实现"><a href="#stl底层实现" class="headerlink" title="stl底层实现"></a><strong>stl底层实现</strong></h3><p>vector：数组</p><p>Dequeue（双端队列）：二维数组</p><p>List：环状双向链表</p><p>set（集合）：平衡的红黑树</p><p>multiset：红黑树</p><p>map：平衡二叉树</p><p>unordered_map：散列表（哈希表）</p><p><strong>而C++ STL 标准库中，不仅是 unordered_map 容器，所有无序容器的底层实现都采用的是哈希表存储结构。更准确地说，是用“链地址法”（又称“开链法”）解决数据存储位置发生冲突的哈希表。</strong></p><h3 id="哈希表原理"><a href="#哈希表原理" class="headerlink" title="哈希表原理"></a>哈希表原理</h3><p>首先是哈希函数，就是把一个长的二级制数据转换成一个短的二进制数据的函数；然后就是解决哈希冲突的方法，常见的有开放寻址法和链表法，前者是通过探测并占用下一个可用的存储位置，后者是在冲突的位置用链表记录多个值。</p><h2 id="编译问题"><a href="#编译问题" class="headerlink" title="编译问题"></a>编译问题</h2><h3 id="编译过程"><a href="#编译过程" class="headerlink" title="编译过程"></a>编译过程</h3><p>（1）预处理阶段处理头文件包含关系，对预编译命令进行替换，生成预编译文件；</p><p>（2）编译阶段将预编译文件编译，生成汇编文件（编译的过程就是把预处理完的文件进行一系列的词法分析，语法分析，语义分析及优化后生成相应的汇编代码)；</p><p>（3）汇编阶段将汇编文件转换成机器码，生成可重定位目标文件（.obj文件）（汇编器是将汇编代码转变成机器可以执行的命令，每一个汇编语句几乎都对应一条机器指令。汇编相对于编译过程比较简单，根据汇编指令和机器指令的对照表一一翻译即可）；</p><p>（4）链接阶段，将多个目标文件和所需要的库连接成可执行文件（.exe文件）</p><h3 id="＃include-lt-file-h-gt-与-＃include-“file-h”的区别？"><a href="#＃include-lt-file-h-gt-与-＃include-“file-h”的区别？" class="headerlink" title="＃include&lt;file.h&gt; 与 ＃include “file.h”的区别？"></a>＃include&lt;file.h&gt; 与 ＃include “file.h”的区别？</h3><p>前者从标准库查找寻找和引用file.h，后者从当前路径寻找和引用</p><h3 id="main函数执行之前会执行什么？执行之后还能执行代码吗？"><a href="#main函数执行之前会执行什么？执行之后还能执行代码吗？" class="headerlink" title="main函数执行之前会执行什么？执行之后还能执行代码吗？"></a>main函数执行之前会执行什么？执行之后还能执行代码吗？</h3><p>（1）全局对象的构造函数会在main函数之前执行；</p><p>（2）可以，可以用_onexit 注册一个函数，它会在main 之后执行;</p><p>如果你需要加入一段在main退出后执行的代码，可以使用atexit()函数，注册一个函数。</p><p>比如全局变量的初始化，就不是由main函数引起的</p><p>举例： class A{};</p><p>A a; &#x2F;&#x2F;a的构造函数限执行</p><p>int main() {}</p><h3 id="动态库和静态库优缺点"><a href="#动态库和静态库优缺点" class="headerlink" title="动态库和静态库优缺点"></a>动态库和静态库优缺点</h3><p><strong>静态库</strong></p><p><strong>优点</strong></p><ol><li>代码装载速度快，执行速度比动态链接库略快</li><li>只需要开发者有lib就行，不需要考虑用户电脑上有无lib。</li></ol><p><strong>缺点</strong></p><p>生成的体积较大，包含相同的公共代码，造成浪费</p><p><strong>动态库</strong></p><p><strong>优点</strong></p><ol><li>节省内存</li><li>dll和exe独立，更换dll就可以改变函数内容，提高可维护性和可拓展性</li><li>不同编程语言只要按照函数调用约定可以用同一个dll</li><li>耦合度小，开发过程独立</li></ol><p><strong>缺点</strong></p><p>用户电脑里面需要有dll</p><h1 id="C-1"><a href="#C-1" class="headerlink" title="C#"></a>C#</h1><h2 id="关键字-1"><a href="#关键字-1" class="headerlink" title="关键字"></a>关键字</h2><h3 id="unsafe"><a href="#unsafe" class="headerlink" title="unsafe"></a>unsafe</h3><p>在C#中，unsafe 关键字用于标识包含不安全代码块的上下文，允许直接使用指针和执行不安全的操作。</p><p>优点：</p><ol><li><p>更高的性能： 使用指针直接操作内存可以提高性能，特别是在处理大量数据或需要高效访问内存的场景下。</p></li><li><p>与非托管代码交互： 允许与非托管代码进行更直接的交互，例如调用 Windows API 或者使用一些底层的系统功能。</p></li><li><p>灵活性： 可以执行一些 C# 中无法直接实现的操作，如访问特定的内存地址或进行底层的位操作。</p></li></ol><p>缺点：</p><ol><li><p>安全性风险： 使用 unsafe 可能导致程序出现潜在的安全漏洞，因为绕过了 C# 的类型安全检查和边界检查。</p></li><li><p>可读性下降： 使用指针和不安全的操作会增加代码的复杂性，并且降低代码的可读性和可维护性。</p></li><li><p>难以调试： 不安全的代码可能更难调试和定位错误，因为涉及到直接操作内存的技术细节。</p></li></ol><h3 id="const和readonly有什么区别？"><a href="#const和readonly有什么区别？" class="headerlink" title="const和readonly有什么区别？"></a>const和readonly有什么区别？</h3><p>都可以标识一个常量。主要有以下区别：<br>1、初始化位置不同。const必须在声明的同时赋值；readonly即可以在声明处赋值;<br>2、修饰对象不同。const即可以修饰类的字段，也可以修饰局部变量；readonly只能修饰类的字段<br>3、const是编译时常量，在编译时确定该值；readonly是运行时常量，在运行时确定该值。<br>4、const默认是静态的；而readonly如果设置成静态需要显示声明<br>5、修饰引用类型时不同，const只能修饰string或值为null的其他引用类型；readonly可以是任何类型。</p><h2 id="反射和特性"><a href="#反射和特性" class="headerlink" title="反射和特性"></a>反射和特性</h2><p>要用到特性就必须要用反射，比如说你要序列化一个类，如果直接写接口来实现，你不知道这个类有哪些属性，而且还要写很多不同的接口，但是用反射可以很优雅地实现，如下。</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c#"><span class="hljs-function"><span class="hljs-built_in">string</span> <span class="hljs-title">Serialize</span>(<span class="hljs-params"><span class="hljs-built_in">object</span> obj</span>)</span><br>&#123;<br>     <span class="hljs-keyword">var</span> res = obj<br>         .GetType()<br>         .GetProperties(BindingFlag.Public | BindingFlags.Instance)<br>         .Where(pi =&gt;<br>                &#123;<br>                    <span class="hljs-keyword">var</span> attr = pi.GetCustomAttribute&lt;BrowsableAtrribute&gt;();<br>                    <span class="hljs-keyword">if</span>(attr <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> attr.Browable;<br>                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>                &#125;)<br>         .Select(pi =&gt; <span class="hljs-keyword">new</span>&#123;Key = pi.Name, Value = pi.GetValue(obj)&#125;)<br>         .Select(o =&gt; <span class="hljs-string">$&quot;<span class="hljs-subst">&#123;o.Key&#125;</span> : <span class="hljs-subst">&#123;o.Value&#125;</span>&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">string</span>.Join(Environment.NewLine, res);<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">Student</span><br>&#123;<br>    [<span class="hljs-meta">Browsable(false)</span>]<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> Id&#123;<span class="hljs-keyword">get</span>;<span class="hljs-keyword">set</span>;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="装箱和拆箱"><a href="#装箱和拆箱" class="headerlink" title="装箱和拆箱"></a>装箱和拆箱</h2><h2 id="引用类型和值类型"><a href="#引用类型和值类型" class="headerlink" title="引用类型和值类型"></a>引用类型和值类型</h2><p>C#中定义的值类型包括原类型（Sbyte、Byte、Short、Ushort、Int、Uint、Long、Ulong、Char、Float、Double、Bool、Decimal）、枚举(enum)、结构(struct)，引用类型包括：类、数组、接口、委托、字符串等，引用型是在堆中分配内存，初始化为null，引用型是需要GARBAGE COLLECTION来回收内存的，值型不用，超出了作用范围，系统就会自动释放！</p><h2 id="结构体和类区别"><a href="#结构体和类区别" class="headerlink" title="结构体和类区别"></a>结构体和类区别</h2><h1 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h1><h2 id="线程和进程"><a href="#线程和进程" class="headerlink" title="线程和进程"></a>线程和进程</h2><h3 id="线程和进程和协程"><a href="#线程和进程和协程" class="headerlink" title="线程和进程和协程"></a>线程和进程和协程</h3><p><a href="https://zhuanlan.zhihu.com/p/279383752">Unity协程的原理与应用 - 宇亓的文章 - 知乎</a></p><p>（1）进程是运行时的程序，是系统进行资源分配和调度的基本单位，它实现了系统的并发；</p><p>（2）线程是进程的子单位，也称为轻量级进程，它是CPU进行分配和调度的基本单位，也是独立运行的基本单位，它实现了进程内部的并发；</p><p>（3）一个程序至少拥有一个进程，一个进程至少拥有一个线程，线程依赖于进程而存在；</p><p>（4）进程拥有独立的内存空间，而线程是共享进程的内存空间的，自己不占用资源；</p><p>（5）线程的优势：线程之间的信息共享和通讯比较方便，不需要资源的切换等.</p><p>每一个进程都独立拥有自己的指令和数据，所以称为资源分配的基本单位。其中数据又分布在内存的不同区域，我们在C语言课程中学习过内存四区的概念，一个运行中的进程所占有的内存大体可以分为四个区域：栈区、堆区、数据区、代码区。其中代码区存储指令，另外三个区存储数据。</p><p>线程是处理器调度和执行的基本单位，一个线程往往和一个函数调用栈绑定，一个进程有多个线程，每个线程拥有自己的函数调用栈，同时共用进程的堆区，数据区，代码区。操作系统会不停地在不同线程之间切换来营造出一个并行的效果，这个策略称为时间片轮转法。</p><p>那么协程在其中又处于什么地位呢？ <strong>一切用户自己实现的，类似于线程的轮子，都可以称之为是协程。</strong></p><h3 id="线程的独占资源和共享资源"><a href="#线程的独占资源和共享资源" class="headerlink" title="线程的独占资源和共享资源"></a>线程的独占资源和共享资源</h3><p><strong>独占资源</strong></p><ol><li>线程就是函数的运行，所以运行时候的信息都是独占的，包括返回值，局部变量，寄存器信息等，每个进程有自己独占的栈区。</li><li>每个线程有自己独立的线程id，独立的调度优先级和错误返回码。</li></ol><p><strong>共享资源</strong></p><ol><li>共享进程的代码区</li><li>共享进程的数据区，即全局变量和静态变量。</li><li>共享进程的堆区。</li><li>动态链接库。</li><li>文件，打开的文件信息。</li><li>共享当前工作目录，以及用户id和组id。</li></ol><h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><p>“线程安全”也不是指线程的安全，而是指内存的安全，在每个进程的内存空间中都会有一块特殊的公共区域，通常称为堆（内存）。进程内的所有线程都可以访问到该区域，这就是造成问题的潜在原因。所以线程安全指的是，在堆内存中的数据由于可以被任何线程访问到，在没有限制的情况下存在被意外修改的风险。</p><p><strong>如何避免</strong>？</p><p>私有化内存</p><p>栈内存</p><h3 id="使用多进程与多线程的区别？"><a href="#使用多进程与多线程的区别？" class="headerlink" title="使用多进程与多线程的区别？"></a>使用多进程与多线程的区别？</h3><p>（1）线程执行开销小，但不利于资源管理和保护；进程则相反，进程可跨越机器迁移。</p><p>（2）多进程时每个进程都有自己的内存空间，而多线程间共享内存空间；</p><p>（3）线程产生的速度快，线程间通信快、切换快；</p><p>（4）线程的资源利用率比较好；</p><p>（5）线程使用公共变量或者资源时需要同步机制。</p><h3 id="操作系统如何保证每个进程都有独立的空间？"><a href="#操作系统如何保证每个进程都有独立的空间？" class="headerlink" title="操作系统如何保证每个进程都有独立的空间？"></a>操作系统如何保证每个进程都有独立的空间？</h3><p>通过虚拟内存来实现，</p><p>首先是虚拟内存分页，</p><p>然后是页表映射，给每个进程维护一个页表，记录了虚拟地址和物理地址的映射关系</p><p>之后是内存保护，操作系统会给分配的进程页表有一些额外的标志，用于控制进程对内存的访问权限。</p><p>之后是上下文切换，<strong>当操作系统切换到一个新的进程时，它会保存当前进程的页表以及其他的上下文信息，并加载下一个进程的页表</strong>。这样，每个进程在运行时拥有自己独立的虚拟地址空间，与其他进程的内存空间相隔离。</p><p>通过虚拟内存机制，操作系统能够为每个进程提供独立的内存空间，<strong>无论是代码、数据还是堆栈，每个进程都认为自己独占系统的整个内存空间</strong>。这种内存隔离保证了每个进程的数据安全和保密性，并且允许操作系统有效地管理和保护进城间的内存使用</p><h3 id="线程同步的方法"><a href="#线程同步的方法" class="headerlink" title="线程同步的方法"></a>线程同步的方法</h3><p><a href="https://zhuanlan.zhihu.com/p/461063930">线程同步的几种方式 - TOMOCAT的文章 - 知乎</a></p><p>同步指的是按一定的顺序依次执行</p><p><strong>互斥锁</strong></p><p><strong>读写锁</strong></p><p><strong>条件变量</strong></p><p><strong>信号量</strong></p><h1 id="计网"><a href="#计网" class="headerlink" title="计网"></a>计网</h1><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="tcp和udp的区别"><a href="#tcp和udp的区别" class="headerlink" title="tcp和udp的区别"></a>tcp和udp的区别</h3><p>（1）TCP是传输控制协议，UDP是用户数据报协议；</p><p>（2）TCP是面向连接的，可靠的数据传输协议，它要通过三次握手来建立连接，UDP是无连接的，不可靠的数据传输协议，采取尽力而为的策略，不保证接收方一定能收到正确的数据；</p><p>（3）TCP面向的是字节流，UDP面向的是数据报；</p><p>（4）TCP只支持点对点，UDP支持一对一，一对多和多对多；</p><p>（5）TCP有拥塞控制机制，UDP没有。</p><h3 id="tcp三次握手的过程"><a href="#tcp三次握手的过程" class="headerlink" title="tcp三次握手的过程"></a>tcp三次握手的过程</h3><p>三次握手的本质是确认通信双方收发数据的能力</p><p>首先，我让信使运输一份信件给对方，<strong>对方收到了，那么他就知道了我的发件能力和他的收件能力是可以的。</strong></p><p>于是他给我回信，<strong>我若收到了，我便知我的发件能力和他的收件能力是可以的，并且他的发件能力和我的收件能力是可以。</strong></p><p>然而此时他还不知道他的发件能力和我的收件能力到底可不可以，于是我最后回馈一次<strong>，他若收到了，他便清楚了他的发件能力和我的收件能力是可以的。</strong></p><h2 id="HTTP和HTTPS"><a href="#HTTP和HTTPS" class="headerlink" title="HTTP和HTTPS"></a>HTTP和HTTPS</h2><h3 id="https为什么更加安全？"><a href="#https为什么更加安全？" class="headerlink" title="https为什么更加安全？"></a>https为什么更加安全？</h3><p><a href="https://zhuanlan.zhihu.com/p/43789231">彻底搞懂HTTPS的加密原理 - 顾伊凡 YGY的文章 - 知乎</a></p><p>http是明文传输，对称加密虽然性能好但有密钥泄漏的风险，非对称加密（2组公钥+2私钥双向传输）安全但性能低下，因此考虑用非对称加密来传输对称加密所需的密钥，然后进行对称加密，但是为了防止非对称过程产生的中间人攻击，需要对服务器公钥和服务器身份进行配对的数字认证，然后引入了CA数字签名+数字证书验证的方式！</p><p>https基本采用以下流程，即非对称+对称</p><ol><li><p>某网站拥有用于非对称加密的公钥A、私钥A’。</p></li><li><p>浏览器向网站服务器请求，服务器把公钥A明文给传输浏览器。</p></li><li><p>浏览器随机生成一个用于对称加密的密钥X，用公钥A加密后传给服务器。</p></li><li><p>服务器拿到后用私钥A’解密得到密钥X。</p></li><li><p>这样双方就都拥有密钥X了，且别人无法知道它。之后双方所有数据都通过密钥X加密解密即可。</p></li></ol><p>但是可能会遭受中间人攻击，即在传输过程中把明文的公钥替换，那么如何保证浏览器收到的公钥就是服务器的公钥？所以就需要CA证书，CA证书本身也需要加密生成一个签名来保证没有被掉包。</p><p>而且也不用每次传输都传输密钥，服务器会为每个浏览器（或<a href="https://www.zhihu.com/search?q=%E5%AE%A2%E6%88%B7%E7%AB%AF&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22article%22,%22sourceId%22:%2243789231%22%7D">客户端</a>软件）维护一个session ID，在TLS握手阶段传给浏览器，浏览器生成好密钥传给服务器后，服务器会把该密钥存到相应的session ID下，之后浏览器每次请求都会携带session ID，服务器会根据session ID找到相应的密钥并进行解密加密操作，这样就不必要每次重新制作、传输密钥了！</p><h1 id="渲染流程"><a href="#渲染流程" class="headerlink" title="渲染流程"></a>渲染流程</h1><p>（1）应用程序阶段，该阶段主要是在软件层面上执行的一些工作，包括空间加速算法、视锥剔除、碰撞检测、动画物理模拟等。大体逻辑是：执行视锥剔除，查询出可能需要绘制的图元并生成渲染数据，设置渲染状态和绑定各种Shader参数，调用DrawCall，进入到下一个阶段，GPU渲染管线。</p><p>（2）几何阶段，包含顶点着色、投影变换、裁剪和屏幕映射阶段。</p><p>a. 顶点处理阶段：这个阶段会执行<strong>顶点变换</strong>和<strong>顶点着色</strong>的工作。通过模型矩阵、观察矩阵和投影矩阵(也就是MVP矩阵)计算出顶点在裁剪空间下的位置(clip space)，以便后续阶段转化为标准化设备坐标系(NDC)下的位置。也可能会计算出顶点的法线(需要有法线变换矩阵)和纹理坐标等。同时，在这个阶段也可能会进行顶点的着色计算，如平面着色 (Flat Shading)和高洛德着色 (Gouraud Shading)都是在顶点着色器中进行着色计算。因为这个阶段是完全可控制的，因此执行什么样的操作由程序员来决定。（此外，在顶点处理阶段的末尾，还有一些可选的阶段，包括曲面细分(tessellation)、几何着色(geometry shading)和流输出(stream output)，此处不详细描述）</p><p>b. 裁剪阶段：简单来说就是两次裁剪的粒度不同，前者是在物体对象层面的，一般对对象的包围盒做剔除，剔除掉不在视锥体内的物体，NDC裁剪是在三角形层面做的，裁剪掉不在屏幕内的像素。</p><p>c. 屏幕映射阶段：主要目的是将之前步骤得到的坐标映射到对应的屏幕坐标系上。</p><p>（3）光栅化阶段，包含三角形设置和三角形遍历阶段。</p><p>a. 三角形设置(图元装配)，计算出三角形的一些重要数据(如三条边的方程、深度值等)以供三角形遍历阶段使用，这些数据同样可用于各种着色数据的插值。</p><p>b. 三角形遍历，找到哪些像素被三角形所覆盖，并对这些像素的属性值进行插值。通过判断像素的中心采样点是否被三角形覆盖来决定该像素是否要生成片段。通过三角形三个顶点的属性数据，插值得到每个像素的属性值。此外透视校正插值也在这个阶段执行。</p><p>这两个阶段是完全硬件控制的，不可进行任何操作。</p><p>（4）<strong>像素处理阶段</strong>，包括像素着色和测试合并。</p><p>a. 像素着色，进行光照计算和阴影处理，决定屏幕像素的最终颜色。各种复杂的着色模型、光照计算都是在这个阶段完成。</p><p>b. 测试合并，包括各种测试和混合操作，如裁剪测试、透明测试、模板测试、深度测试以及色彩混合等。经过了测试合并阶段，并存到帧缓冲的像素值，才是最终呈现在屏幕上的图像。</p><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p>面经：<a href="https://zhuanlan.zhihu.com/p/417640759">https://zhuanlan.zhihu.com/p/417640759</a></p><p>设计模式：<a href="https://zhuanlan.zhihu.com/p/23821422">https://zhuanlan.zhihu.com/p/23821422</a></p><p>C++面经：<a href="https://github.com/huihut/interview?tab=readme-ov-file">https://github.com/huihut/interview?tab=readme-ov-file</a></p><p><a href="https://github.com/guaguaupup/cpp_interview?tab=readme-ov-file">https://github.com/guaguaupup/cpp_interview?tab=readme-ov-file</a></p>]]></content>
    
    
    <summary type="html">痛定思痛决定好好重新整理一份八股文</summary>
    
    
    
    <category term="找工作" scheme="https://rorschachandbat.github.io/categories/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>《妙趣横生的游戏制作之旅》读书笔记</title>
    <link href="https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E3%80%8A%E5%A6%99%E8%B6%A3%E6%A8%AA%E7%94%9F%E7%9A%84%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E4%B9%8B%E6%97%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E3%80%8A%E5%A6%99%E8%B6%A3%E6%A8%AA%E7%94%9F%E7%9A%84%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C%E4%B9%8B%E6%97%85%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</id>
    <published>2024-03-24T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.601Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、构思——制作想法"><a href="#一、构思——制作想法" class="headerlink" title="一、构思——制作想法"></a>一、构思——制作想法</h1><h2 id="1-如何开始"><a href="#1-如何开始" class="headerlink" title="1.如何开始"></a>1.如何开始</h2><p>作者介绍了三种方法：头脑风暴、调研和原型</p><h2 id="2-头脑风暴"><a href="#2-头脑风暴" class="headerlink" title="2.头脑风暴"></a>2.头脑风暴</h2><p>头脑风暴最好有一些基本规则，比如：</p><p>设定时间限制；注重数量而不是质量；一次只有一人发言；让一个人来协调大家；让每个人都能发言；把一切都写下来；欢迎奇怪的想法；多肯定别人的想法；不要深入讨论出现的想法。</p><p><strong>评估头脑风暴结果</strong></p><p>做表列出根据不同维度的指标打分，“最重要的是选出团队都能接受的方案。“</p><p><strong>一些其他的奇思妙想的方法</strong></p><p>思维导图：一直链接</p><p>自动化：放空大脑让自己在纸上随便写点画点东西。</p><p>剪贴法：拿一个笔记本随时记录自己的想法。</p><h2 id="3-调研"><a href="#3-调研" class="headerlink" title="3.调研"></a>3.调研</h2><p>互联网；图片；实地考察；访谈；影子观察法：这个挺有意思，观察一个人的一天，游戏测试也有用到。</p><h2 id="4-原型"><a href="#4-原型" class="headerlink" title="4.原型"></a>4.原型</h2><p><strong>游戏原型不是游戏的演示</strong></p><p><strong>每一个原型都会为你的游戏探索一个或多个想法</strong></p><p>在构思阶段，可以尽可能多地制作原型，一个原型能验证一个有趣的想法就够了。</p><p>用每一个原型来回答一个问题，比如：“用鼠标控制钓鱼是否可行？“</p><h3 id="三种原型设计方式"><a href="#三种原型设计方式" class="headerlink" title="三种原型设计方式"></a>三种原型设计方式</h3><p><strong>趣味原型设计</strong></p><p>直接拿现成的玩具，或者干脆用动作来演示你想做的游戏是怎么玩的。</p><p><strong>实物原型设计</strong></p><p>做一个桌游，这里有一个孤星猎人的验证思路视频，很有意思，<a href="https://www.bilibili.com/video/BV1fw4m1R75K/?share_source=copy_web&vd_source=5d07d04eb2516df147034367e7af6fd2">可以看看</a></p><p>视频里也演示了实物的优势，就是迭代很快，可以验证想法的可行性。</p><p><strong>数字原型设计</strong></p><h1 id="二、预制作——通过制作进行设计"><a href="#二、预制作——通过制作进行设计" class="headerlink" title="二、预制作——通过制作进行设计"></a>二、预制作——通过制作进行设计</h1>]]></content>
    
    
    <summary type="html">记录一下这本书的内容，帮助自己梳理游戏制作的方法和流程。</summary>
    
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="游戏设计" scheme="https://rorschachandbat.github.io/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="找工作" scheme="https://rorschachandbat.github.io/tags/%E6%89%BE%E5%B7%A5%E4%BD%9C/"/>
    
    <category term="游戏制作" scheme="https://rorschachandbat.github.io/tags/%E6%B8%B8%E6%88%8F%E5%88%B6%E4%BD%9C/"/>
    
  </entry>
  
  <entry>
    <title>【GDC讲座】万智牌的20个教训</title>
    <link href="https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E3%80%90gdc%E8%AE%B2%E5%BA%A7%E3%80%91%E4%B8%87%E6%99%BA%E7%89%8C%E7%9A%8420%E4%B8%AA%E6%95%99%E8%AE%AD/"/>
    <id>https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E3%80%90gdc%E8%AE%B2%E5%BA%A7%E3%80%91%E4%B8%87%E6%99%BA%E7%89%8C%E7%9A%8420%E4%B8%AA%E6%95%99%E8%AE%AD/</id>
    <published>2024-01-18T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.638Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-跟人性作对是自寻死路"><a href="#1-跟人性作对是自寻死路" class="headerlink" title="1.跟人性作对是自寻死路"></a>1.跟人性作对是自寻死路</h1><p>有一个机制是延缓，得等三回合才能攻击，但是万智牌的规则不允许等待之后立马攻击，所以改了很多次都无法改好，最后改成能立马攻击了，所以要为了你的玩家来调整游戏而不是相反。</p><h1 id="2-美感很重要"><a href="#2-美感很重要" class="headerlink" title="2.美感很重要"></a>2.美感很重要</h1><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240119153159053.png" alt="image-20240119153159053"></p><p>这张牌被吐槽了很多，既不是因为他的强度，他的受欢迎度，而是因为他的攻击力是7，生命是7，效果是花七点血摸七张牌，但是他的花费是八点水晶（哈哈哈哈）</p><p>平衡感，对称感，整体感，不要和人类感知作对。</p><h1 id="3-共鸣很重要"><a href="#3-共鸣很重要" class="headerlink" title="3.共鸣很重要"></a>3.共鸣很重要</h1><p>玩家是有一些预先的知识和概念的，所以设计师不是从无到有地设计，你需要基于这一基础制作出更丰富的情感体验</p><h1 id="4-借用常识"><a href="#4-借用常识" class="headerlink" title="4.借用常识"></a>4.借用常识</h1><p>用已经存在的知识作为游戏信息，可以让游戏更加容易上手。</p><p>把木马（借用了特洛伊木马的点子）改成狮子之后会让玩家困惑这张牌的作用。</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240119153954784.png" alt="image-20240119153954784"></p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240119154004563.png" alt="image-20240119154004563"></p><p>下面是一个植物大战僵尸的例子，他的设计师在设计的时候，觉得塔防游戏如果放了塔就不能移动显得很不符合逻辑，为什么这里其他地方需要帮忙他的士兵不能过去，所以他在想什么东西会更加符合直觉，于是他选择了植物，因为植物一旦放下就不能移动。然后怪物需要是一种不断靠近的生物，所以他选择了僵尸，看上去是为了幽默的两种组合其实也是经过思考的。</p><h1 id="5-不要错把“听起来有意思”当成真的“好玩”"><a href="#5-不要错把“听起来有意思”当成真的“好玩”" class="headerlink" title="5.不要错把“听起来有意思”当成真的“好玩”"></a>5.不要错把“听起来有意思”当成真的“好玩”</h1><p>理性觉得好玩不一定真的好玩</p><h1 id="6-理解你游戏希望唤醒的情感"><a href="#6-理解你游戏希望唤醒的情感" class="headerlink" title="6.理解你游戏希望唤醒的情感"></a>6.理解你游戏希望唤醒的情感</h1><p>为了让玩家感受到恐怖，设计了双面牌（比如一面是科学家一面是狼人），还有返场法术，亡语。</p><p>游戏的所有元素都要为了游戏的情感服务</p><h1 id="7-允许玩家有能力将游戏与自己联系起来"><a href="#7-允许玩家有能力将游戏与自己联系起来" class="headerlink" title="7.允许玩家有能力将游戏与自己联系起来"></a>7.允许玩家有能力将游戏与自己联系起来</h1><p>把基础枯燥的地卡的图片放大，每一张地卡都用不同的团，甚至用真实地形，这会让玩家很有参与感，让玩家对游戏产生更亲密的个人联系很重要，玩家越觉得游戏是为他们自己而设计的，他们就会越觉得游戏越棒。（熟悉感&#x3D;品质）</p><p>方法即使：多给玩家选择， 给他们不同资源，不同思路，不同表达方式，给他们选择和不选择的权利，让玩家觉得是他们自己做出的选择</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240119160250626.png" alt="image-20240119160250626"></p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240119160229907.png" alt="image-20240119160229907"></p><h1 id="8-细节是让玩家爱上你游戏的原因"><a href="#8-细节是让玩家爱上你游戏的原因" class="headerlink" title="8.细节是让玩家爱上你游戏的原因"></a>8.细节是让玩家爱上你游戏的原因</h1><p>玩家需要细节来和游戏产生羁绊</p><h1 id="9-要让玩家有拥有感"><a href="#9-要让玩家有拥有感" class="headerlink" title="9.要让玩家有拥有感"></a>9.要让玩家有拥有感</h1><p>受到玩家自制规则指挥赛的启发（就是一张传奇卡+99张同颜色卡），官方出了很多很多dlc，所以当玩家对某些细节产生好感之后，你需要给他们制作与众不同内容的能力，（电子游戏或许就是给他们打mod？），关键在于自定义，你要让他们实现与众不同的事，完成他们自己的创作（用自己构筑的卡组用了</p><h1 id="10-给玩家空间自己探索"><a href="#10-给玩家空间自己探索" class="headerlink" title="10.给玩家空间自己探索"></a>10.给玩家空间自己探索</h1><p>举了一个他们设计卡的时候没想到的联动（这种在炉石啊也很常见，这很有趣</p><p>不要给玩家灌输思想，让他们自己思考，因为人更关心自己发起的事情</p><h1 id="11-如果所有人喜欢你的游戏，但没人爱你的游戏，游戏会失败"><a href="#11-如果所有人喜欢你的游戏，但没人爱你的游戏，游戏会失败" class="headerlink" title="11.如果所有人喜欢你的游戏，但没人爱你的游戏，游戏会失败"></a>11.如果所有人喜欢你的游戏，但没人爱你的游戏，游戏会失败</h1><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240119171325042.png" alt="image-20240119171325042"></p><p>别担心唤起负面情绪，多担心如恶化才能唤起一种强烈的感受</p><h1 id="12-别为了证明自己去设计"><a href="#12-别为了证明自己去设计" class="headerlink" title="12.别为了证明自己去设计"></a>12.别为了证明自己去设计</h1><p>做了一张两费的英雄卡（planeswalkers），做成两费是因为已经做过了三费四费五费的，所以想尝试一张两费的， 但是玩家觉得太垃圾了，因为强度太低，他们喜欢英雄卡是因为通常很强，但是两费的限制让他不能太强。</p><p>做游戏不是为了自己开心或是证明自己的能力，而是为了好玩，为了玩家。</p><h1 id="13-让好玩的玩法同样也是赢得游戏的正确策略"><a href="#13-让好玩的玩法同样也是赢得游戏的正确策略" class="headerlink" title="13.让好玩的玩法同样也是赢得游戏的正确策略"></a>13.让好玩的玩法同样也是赢得游戏的正确策略</h1><p>万智牌加入过一种搞笑机制，Gocha（大意就是做了某些事就可以拿回这张卡，类似不要做挑战），这样会让游戏变得很沉闷，因为玩家想要赢的话就最好什么都不要做，不要笑不要说话之类的，所以体验会很糟糕。</p><h1 id="14-不要担心用简单粗暴的手段"><a href="#14-不要担心用简单粗暴的手段" class="headerlink" title="14.不要担心用简单粗暴的手段"></a>14.不要担心用简单粗暴的手段</h1><h1 id="15-为目标用户设计内容"><a href="#15-为目标用户设计内容" class="headerlink" title="15.为目标用户设计内容"></a>15.为目标用户设计内容</h1><p>弄清用户的需求，做游戏里的宜家</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240119173137436.png" alt="image-20240119173137436"></p><p>一张卡有投硬币的机制（能带来兴奋），也很平衡，但是两者都想讨好的结果就是大家都不喜欢。</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240119173302969.png" alt="image-20240119173302969"></p><h1 id="16-宁可尝试打破常规，也不要墨守成规让玩家觉得无聊"><a href="#16-宁可尝试打破常规，也不要墨守成规让玩家觉得无聊" class="headerlink" title="16.宁可尝试打破常规，也不要墨守成规让玩家觉得无聊"></a>16.宁可尝试打破常规，也不要墨守成规让玩家觉得无聊</h1><p>一开始设计饼干卡的时候除了自己和创始人没人喜欢，但是还是坚持下去了，结果大受欢迎</p><h1 id="17-你不需要做太多变动就可以改变全局"><a href="#17-你不需要做太多变动就可以改变全局" class="headerlink" title="17.你不需要做太多变动就可以改变全局"></a>17.你不需要做太多变动就可以改变全局</h1><p>由多色玩法引申而来，想要做一个另一个多色系列，如何做出不一样的感觉？改成双色的组合就大受欢迎</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240119174256154.png" alt="image-20240119174256154"></p><h1 id="18-限制是创造力的温床"><a href="#18-限制是创造力的温床" class="headerlink" title="18.限制是创造力的温床"></a>18.限制是创造力的温床</h1><p>选择越多不一定创造力更强</p><h1 id="19-你的受众很擅长指出问题，但不擅长解决问题"><a href="#19-你的受众很擅长指出问题，但不擅长解决问题" class="headerlink" title="19.你的受众很擅长指出问题，但不擅长解决问题"></a>19.你的受众很擅长指出问题，但不擅长解决问题</h1><h1 id="20-所有经验教训都是相互关联的"><a href="#20-所有经验教训都是相互关联的" class="headerlink" title="20.所有经验教训都是相互关联的"></a>20.所有经验教训都是相互关联的</h1>]]></content>
    
    
    <summary type="html">设计万智牌20年总结的20条经验 - 万智牌首席设计师Mark Rosewater经验分享</summary>
    
    
    
    <category term="游戏设计" scheme="https://rorschachandbat.github.io/categories/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
    <category term="游戏设计" scheme="https://rorschachandbat.github.io/tags/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    <category term="GDC讲座" scheme="https://rorschachandbat.github.io/tags/GDC%E8%AE%B2%E5%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>出色的动作游戏是如何做出来的？</title>
    <link href="https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%87%BA%E8%89%B2%E7%9A%84%E5%8A%A8%E4%BD%9C%E6%B8%B8%E6%88%8F%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%E5%87%BA%E6%9D%A5%E7%9A%84%EF%BC%9F/"/>
    <id>https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%87%BA%E8%89%B2%E7%9A%84%E5%8A%A8%E4%BD%9C%E6%B8%B8%E6%88%8F%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%E5%87%BA%E6%9D%A5%E7%9A%84%EF%BC%9F/</id>
    <published>2024-01-04T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.720Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动作游戏的要素"><a href="#动作游戏的要素" class="headerlink" title="动作游戏的要素"></a>动作游戏的要素</h1><p>作者首先讲了六种让动作游戏变得好玩的要素。</p><h2 id="动作链"><a href="#动作链" class="headerlink" title="动作链"></a>动作链</h2><p>马里奥奥德赛有各种跳跃的方式，比如高跳，远跳，帽子跳，通过结合使用这些跳跃方式你可以去到一些不寻常的地方</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240111111207.png" alt="微信图片_20240111111207"></p><p>其他类似例子：麻布仔：大冒险 (2020) 时光之帽 (2017) 托尼·霍克的职业滑冰者 1 + 2 (2020)</p><h2 id="与环境交互"><a href="#与环境交互" class="headerlink" title="与环境交互"></a>与环境交互</h2><p>日落超速 (2014)，这款游戏只有简单的跑，加速，翻滚，但是这款游戏可以丰富地和环境交互，比如在遮阳棚弹跳，在电线上滑行，在杆上摇摆</p><p>其他类似的比如幽灵行者和奥日</p><h2 id="时机"><a href="#时机" class="headerlink" title="时机"></a>时机</h2><p>无路之旅：这款游戏可以用箭射击目标来获得短暂加速，你必须为射击充能，并在计量表完全充满时释放，这给游戏带来一种有节奏感的动作模式</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240111111211.png" alt="微信图片_20240111111211"></p><h2 id="动量"><a href="#动量" class="headerlink" title="动量"></a>动量</h2><p>泰坦陨落2：这个游戏简单的奔跑速度很慢，但是你可以通过滑铲跳，上墙，抓钩，甚至是手榴弹的方式来获得持续的动量来保证一个很大的速度，</p><p>其他类似：镜之边缘，不保持动量就无法完成挑战，crumble</p><h2 id="理解轨迹"><a href="#理解轨迹" class="headerlink" title="理解轨迹"></a>理解轨迹</h2><p>cyberhook：这是一款利用钩锁跑酷的游戏，他要求你理解轨迹。绳索的轨迹又重力和张力共同决定，为了最大限度的利用机制，我们必须在心中画出精准的摆荡弧线，一些滑翔机制的游戏也有同样的道理。</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/da1e2b05f96686fe836a0c8ca475924.png" alt="da1e2b05f96686fe836a0c8ca475924"></p><h2 id="巧用物理"><a href="#巧用物理" class="headerlink" title="巧用物理"></a>巧用物理</h2><p>火箭联盟：你可以操作汽车做出一些非常难以想象的动作，比如飞越整个球场，倒挂金钩</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/image-20240111114026196.png" alt="image-20240111114026196"></p><p>这些元素可以混合使用，比如正当防卫，你可以打出钩锁，然后收缩获得动量，之后链接打开降落伞和滑翔翼</p><h1 id="为什么这些元素会显得好玩？"><a href="#为什么这些元素会显得好玩？" class="headerlink" title="为什么这些元素会显得好玩？"></a>为什么这些元素会显得好玩？</h1><h2 id="所有这些方法都允许真正的移动自由"><a href="#所有这些方法都允许真正的移动自由" class="headerlink" title="所有这些方法都允许真正的移动自由"></a>所有这些方法都允许真正的移动自由</h2><p>把墙壁和障碍变成了挑战而不是阻碍，增加了整个游戏的垂直感。</p><h2 id="允许模糊输入"><a href="#允许模糊输入" class="headerlink" title="允许模糊输入"></a>允许模糊输入</h2><p>对比塞尔达和apex的钩爪，自由度完全不一样，可操作度也自由的多</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/db4855b33aedba57af2a6873e0c2a63.png" alt="db4855b33aedba57af2a6873e0c2a63"></p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/db16a1fc753793b1662520c163f95ea.png" alt="db16a1fc753793b1662520c163f95ea"></p><h2 id="允许你随着心流移动"><a href="#允许你随着心流移动" class="headerlink" title="允许你随着心流移动"></a>允许你随着心流移动</h2><p>当你的移动做得好，你可以完整的游玩整个关卡而不用减速或者停止</p><h2 id="这些高级的移动机制是对技巧的测试"><a href="#这些高级的移动机制是对技巧的测试" class="headerlink" title="这些高级的移动机制是对技巧的测试"></a>这些高级的移动机制是对技巧的测试</h2><p>链式移动：你需要理解如何连接</p><p>利用环境：你需要有一定的精度</p><p>时机不用多说</p><p>动量：你移动的越快就越难控制</p><p>轨迹要求你内化成自己的轨迹</p><p>基于物理的角色难以驾驭</p><h2 id="当你拥有这些技巧时，这些机制的使用会让你开心"><a href="#当你拥有这些技巧时，这些机制的使用会让你开心" class="headerlink" title="当你拥有这些技巧时，这些机制的使用会让你开心"></a>当你拥有这些技巧时，这些机制的使用会让你开心</h2><p>链式移动时，你仿佛在键盘上弹奏微小而快速的钢琴旋律；利用环境的时候你在不断地规划路线；抓住时机的正反馈非常大；不断获得更大的动量的时候让你既兴奋又害怕；</p>]]></content>
    
    
    <summary type="html">GMTK的六种关于动作游戏好玩的要素</summary>
    
    
    
    <category term="游戏设计" scheme="https://rorschachandbat.github.io/categories/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>2023书影游总结</title>
    <link href="https://rorschachandbat.github.io/%E9%9A%8F%E7%AC%94/2023%E4%B9%A6%E5%BD%B1%E6%B8%B8%E6%80%BB%E7%BB%93/"/>
    <id>https://rorschachandbat.github.io/%E9%9A%8F%E7%AC%94/2023%E4%B9%A6%E5%BD%B1%E6%B8%B8%E6%80%BB%E7%BB%93/</id>
    <published>2024-01-01T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="书"><a href="#书" class="headerlink" title="书"></a>书</h1><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/571fe6a36073b20ee5f54903b5968ab.jpg"></p><h2 id="我偏爱读诗的荒谬"><a href="#我偏爱读诗的荒谬" class="headerlink" title="我偏爱读诗的荒谬"></a>我偏爱读诗的荒谬</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/s34075545.jpg" alt="我偏爱读诗的荒谬"></p><p>三十篇教你如何欣赏现代诗的文章，循序渐进，理解诗意是一个很困难的过程，这本小书或许可以带你走进现代诗的大门。</p><h2 id="小行星掉在下午"><a href="#小行星掉在下午" class="headerlink" title="小行星掉在下午"></a>小行星掉在下午</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/s33531914.jpg" alt="小行星掉在下午"></p><p>今年读过的最有趣的短篇小说集，每一篇或多或少带有一点奇幻或者科幻的味道，但是读起来又很有现实意义，颇有一种村上的感觉。</p><p>最喜欢《工作狂》这一篇，对于工作和摸鱼的吐槽太有意思了；《使喂养人害怕的猫》也很好笑，夸张化的猫奴；《星际迷航》第一篇蛮有意思，瞎吹人员这个职业太黑色幽默了。</p><p>其他有意思的短篇小说有《平原上的摩西》，读起来有一种阿城的感觉；《回忆扑克牌》，这本集子的心理描写以及感情纠纷写的非常细腻，也挺好看；《如雪如山》，每一篇女主角都叫lili，比喻和文笔很舒服；《国王的游戏》，这本集子很多游戏和桌游的同人文，从熟悉的机制延申了很多有意思的故事。</p><h2 id="不方便，但很幸福"><a href="#不方便，但很幸福" class="headerlink" title="不方便，但很幸福"></a>不方便，但很幸福</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/s33708031.jpg" alt="不方便，但很幸福"></p><p>深居山林的孤独生活，种菜捉鱼挖野菜，虽然日子过得紧巴巴的，但作者总是非常乐观，看得很开心的一本漫画。</p><p>今年我一直在b站，豆瓣小组看各种人的fire生活，比如银滩北海云南，每次上班上的不开心就想着找一个一年一千块房租的地方宅一年，每天运动运动，看看闲书，打打游戏，这种幻想是忍受目前工作的一些动力。</p><h2 id="just-for-fun"><a href="#just-for-fun" class="headerlink" title="just for fun"></a>just for fun</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/s34464811.jpg" alt="只是为了好玩"></p><p>创造出linux和git的神人的自传，拥抱开源，专注，有热情，极具极客精神，非常令人敬佩。知乎有一个很有趣的帖子是，假如Llinus出生在中国会怎样，回答十分难绷，一个人的成功肯定是和家庭和环境都有关系的，linus幼儿园就抱着教授外公的电脑开始捣鼓程序了，本书后面也讲述他许多关于人生的看法，值得一读。</p><h2 id="一个女人的故事"><a href="#一个女人的故事" class="headerlink" title="一个女人的故事"></a>一个女人的故事</h2><blockquote><p>“我的母亲死了，于4月7日星期一，在蓬图瓦兹医院的老年病房。我失去了与我所来自的世界的最后一根纽带。”</p></blockquote><p>这本短短的自传体小说从母亲的去世开始写起，然后再从头开始回忆母亲的一生。尽管写得很克制了，但作者对母亲的爱太令人感同身受了，一个逐渐失去记忆的母亲，逐渐忘记和自己回忆的感觉太可怕了，仿佛随时有可能发生在自己身上一样。</p><p>今年读了很多讲家庭的书，大概是因为在北京待的时间太长了，有一种游子的哀伤，所以看这些总是很有感触。《夫之历》：一本描述父爱的漫画，看到父亲默默养自己留下来的狗的时候泪崩了；《明亮的夜晚》：三对母女的故事，横跨了数十年，和家人的关系或许是要用一生来学习的命题，读的过程中总想到一句歌词：“最心疼是，爱的太迟，有些心意，不可等某个日子…”；《秋园》：中国普通人的个人史，有一种听家里老人讲故事的感觉，苦难的日子真的多啊。</p><h2 id="象之首"><a href="#象之首" class="headerlink" title="象之首"></a>象之首</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/s34632149.jpg" alt="エレファントヘッド"></p><blockquote><p>泄底剧透警告</p></blockquote><p>白井重新点燃了我对推理的热情，实在是太鬼才了，这本是我第一次读白井，核心设定是人格分类导致的物理相连的多元宇宙，非常有意思，故事篇剧情进展猪突猛进，各类鬼畜血腥元素砸过来，解答篇也是相当精彩，各种伏线的回收看的眼花缭乱，三个伪解答都看的很爽，既奉献了两个空间和时间的本格解答，也奉献了一个宇宙矛盾的变格解答，最后的真解答也让人叫绝。</p><p>之后又读了《名侦探的牺牲》，《彩虹牙刷》和《绝叫》，都各有特色，新的一年希望继续读各种有意思的诡计。（目前待读就有《X的悲剧》，《无人逝去》和《罗杰疑案》）</p><h1 id="影"><a href="#影" class="headerlink" title="影"></a>影</h1><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/479ee89b5369ac9d561ca02b316453f.jpg"></p><p>今年还真是在电影院看了蛮多电影，八九月的时候每周都跑资料馆，今年的看过里面有四部都是短视频看的老片，嗯，我已经开始堕落成这种人了QAQ，不过我已经看淡了，很多老片确实看个情节就好了。</p><h2 id="恐怖分子"><a href="#恐怖分子" class="headerlink" title="恐怖分子"></a>恐怖分子</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/p2347245849.webp" alt="恐怖份子"></p><p>杨德昌实在是太厉害了，一开始多线叙事看的有点晕，最后交织到一起的时候看的真揪心，影片一点点地把毁掉男主的过程展示出来，最后开的那一枪仿佛射向了自己，伴随着蔡琴悠扬的歌声，结束的那么突然。</p><h2 id="情书"><a href="#情书" class="headerlink" title="情书"></a>情书</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/p2648230660.webp" alt="Love Letter"></p><p>嗯，确实是今年才第一次看这部片，资料馆的大屏幕体验相当好，中途看哭我两次，一次是爷爷拼死背着女树，一次是博子在雪山喊话男树，电影真的很美，女树的生活很令人羡慕啊，图书管理员的工作，能和家里人住在一起，自由自在的。</p><h2 id="火山挚恋"><a href="#火山挚恋" class="headerlink" title="火山挚恋"></a>火山挚恋</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/p2896531014.webp" alt="Fire of Love"></p><blockquote><p>看完情书的同一天晚上突发奇想去看的这部片，不得不说有一种很奇妙的冰火两重天的体验。</p></blockquote><p>电影是美的，许多火山的实拍镜头相当令人着迷，经历了漫长的地质时间，人类诞生两百万年之后，两个人诞生于同一时代同一地点，他们热爱着同一件事，热爱着彼此，推动了人类对于火山的认知。他们是追逐危险的疯子，是冒险家，是选择月亮的人，不顾一切地观察，拍摄，留下了这么多震撼到让我觉得不真实的记录。地球是有那么多的疑问，那样的绚烂，相比之下人类社会是如此的庸俗渺小，纪念他们短暂但是绚烂的一生。</p><h2 id="gamenight"><a href="#gamenight" class="headerlink" title="gamenight"></a>gamenight</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/p2514235105.webp" alt="Game Night"></p><p>在南京旅游晚上在民宿看的，可以说是送给桌游人的电影，开头桌游的蒙太奇接用桌游求婚的片段看得真开心。看到电影里男主和好朋友聚在家里玩桌游的画面，这简直就是我的人生理想！</p><h2 id="年会不要停"><a href="#年会不要停" class="headerlink" title="年会不要停"></a>年会不要停</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/p2901057189.webp" alt="年会不能停！"></p><p>2023年的最后一部电影，影片的节奏实在是太棒了，毫无尿点，辛辣地讽刺了职场的方方面面，裁员广进、pua、拉帮结派不干实事，白客这张上班脸看得人真心疼，结尾比较理想化，但是看的又爽又开心。</p><h1 id="游"><a href="#游" class="headerlink" title="游"></a>游</h1><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87_20240102105508.png"></p><p>今年的游戏开了很多坑，但是玩完的却不多，很多都中道崩殂了，比如逆转裁判，十三机兵，塞尔达……没办法，想玩的实在太多。</p><h2 id="马里奥奥德赛"><a href="#马里奥奥德赛" class="headerlink" title="马里奥奥德赛"></a>马里奥奥德赛</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/s29543798.jpg" alt="超级马力欧 奥德赛 スーパーマリオ オデッセイ"></p><p>神作，游戏设计的标杆，任天堂真的太能藏东西了，用一个词来形容游玩的过程就是惊喜。总是在不断满足自己的好奇心，或许是拐角遇到月亮，或许是遇到一个特别的挑战，或许是变身成一个新生物，甚至是不小心条约失误掉落也能发现一个新世界，这种随时随地有新东西的感觉太棒了，这绝对是switch必玩的游戏！</p><h2 id="一堆派对游戏"><a href="#一堆派对游戏" class="headerlink" title="一堆派对游戏"></a>一堆派对游戏</h2><p>从国庆开始，在switch上玩了很多派对游戏，真是太欢乐了，录了许多条欢声笑语的视频，马派的合作划船相当累并且欢乐；马派的各种小游戏也是欢乐满满；马车8的道具赛相当刺激；12switch在动车餐车上通宵玩了一晚上，一个可以上限一百人的派对游戏，节目效果爆炸。</p><h2 id="街头霸王6"><a href="#街头霸王6" class="headerlink" title="街头霸王6"></a>街头霸王6</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/479ac5c9838f3a7802698666060085026308fcde.png"></p><p>去年玩的最久的游戏，作为一个格斗游戏小白，从零开始开始慢慢修炼的感觉非常好，感谢卡普空的现代模式，一键连招一键必杀让手残也有机会领略格斗游戏的魅力。</p><p>玩街霸是一种心态的磨炼，从一开始的只会抽奖打伤害，到后来的学习抓住对手的失误反击，再到一些套路和进攻的选择。</p><p>玩街霸你要接受自己的失误，接受失败，接受对面一直复读但是你又不知道如何应对，但是你不要把爽点放在胜利上，对局的每一次连段成功，每一次对策成功，都是非常令人振奋的。只要肯练习，肯学习，就一定会进步，这正是最强的正反馈。</p><h2 id="博德之门3"><a href="#博德之门3" class="headerlink" title="博德之门3"></a>博德之门3</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/%E5%85%A8%E5%AE%B6%E7%A6%8F.jpg" alt="全家福"></p><p>去年最沉迷的游戏，即使是加班的日子也每天九点启动打到凌晨一点，和好朋友探险的感觉真的太棒了，游戏的自由度和丰富度实在是太高了，每一个npc每一个剧情，再到不同的人物，装备，法术，一切东西你都可有自己的选择，拉瑞安扎扎实实地堆出了一个真实又有趣的世界，不过可惜的是还停留在第三章，希望有机会能玩完。</p><h2 id="怪兽远征"><a href="#怪兽远征" class="headerlink" title="怪兽远征"></a>怪兽远征</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/s33721384.jpg" alt="怪兽远征 A Monster&#39;s Expedition"></p><p>神中神，一年前沉迷了一段时间，今年终于顺畅地解完最后的几个小岛。太爽了，游戏是解密开放世界，很简单的推箱子机制，但是做到了极致，每一个小岛都像是在把玩一个孔明锁一样的小玩具，每次不断试错然后恍然大悟的尤里卡时刻让人非常上瘾，短木头，长木头，木筏，每一个谜题出现的新解法都能让你感慨设计的巧妙，遇到第一个木筏能推的时候直接震惊了，以及每一个一开始看起来不可能（比如死锁，换角度，双岛联动）的谜题但最后解出来的感觉真的太棒了。游戏的节奏感也把握的非常好，每次解完一个难关之后会有一些关于现代人类的吐槽，或者是一个一步式的谜题放松脑子。值得一提的是此游戏还有开放世界的感觉，你可以选择不同的道路探索，“以不同的眼光看旧路”，这种感觉太棒了，还有很多雪人没有收集，很多小岛没去……</p><h1 id="一些碎碎念"><a href="#一些碎碎念" class="headerlink" title="一些碎碎念"></a>一些碎碎念</h1><p>回看去年的目标，没完成的很多，日语没学，运动也没突破，好消息是开始做游戏demo了，而且闲书读的蛮多，但总是囫囵吞枣不求甚解，最近发现很多曾经看过的电影读过的书都想不起来细节了，新的一年多做总结慢慢来吧。</p>]]></content>
    
    
    <summary type="html">挺开心的一年</summary>
    
    
    
    <category term="随笔" scheme="https://rorschachandbat.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>东京贫困女子</title>
    <link href="https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%B8%9C%E4%BA%AC%E8%B4%AB%E5%9B%B0%E5%A5%B3%E5%AD%90/"/>
    <id>https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E4%B8%9C%E4%BA%AC%E8%B4%AB%E5%9B%B0%E5%A5%B3%E5%AD%90/</id>
    <published>2023-12-27T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.393Z</updated>
    
    <content type="html"><![CDATA[<p>提倡同薪同酬也好，实施住房扶持政策也罢，或者是实现男女平等也行，无论哪种形式，只要能将普通女性的可支配收入增加3万～5万日元，或者让她们的实际收入能和男性有相同程度的增长，从事风俗业的女性都会大幅减少。女性不断流入卖身世界的现状，现今不再是个人问题，而是已演变成一个国家的问题。</p><p>如今的社会是男性占优势地位，生活困苦的女性即使拒绝了通过风俗业从男性获得再分配的行为，也得不到任何好处，充其量就是转而选择长时间劳动，最后牺牲自己的健康。</p><p>看护行业和贫困问题采访得多了，就会渐渐看清国家的意图或意向。说实话，国家对除国家的行政公务员以外的职员，根本就不愿意支付酬金。他们知道自己正在让协助运营公共事业的国民和市民生活在贫困阶层，并且有意让这些劳动者的生活尽可能地接近贫困线。</p><p>从图书馆的图书管理员等临时职员、非常勤职员的情况和看护保险的制度设计就能非常明显地看出，国家和行政所追求的（针对不是公务员的劳动者）一定是“付最少的钱，达到最大的效果”。</p><p>我在采访福利行业和看护行业时，看到了深深依赖于雇用非正式化的公共事业中，太多令人绝望的现实。</p><p class="note note-primary">如果从工作上就有薪资不平等的情况，那么其他政策都是无稽之谈</p><p>在1999年和2004年，《劳动者派遣法》分别进行过修订，整个社会的雇用非正式化不断推进。其中，雇用的非正式化推进最快的就是地方自治体。由于小泉纯一郎政权时代的结构改革，给地方自治体的补助金被削减了，于是政府机构转而开始压缩雇用费用。他们将此前由公务员负责处理的业务交给了非正式职员，于是，官制穷忙族便诞生了。</p><p>女性首先成为了他们的目标，图书管理员、护工、保育士、窗口接待等工作一项一项改为非正式聘用制。不仅业务部门的职员的雇用被非正式化，从2000年代开始，幼儿园、看护机构，最近连图书馆都开始整个被外包给民间运营，而自治体支付的委托费用又十分低廉，这些行业都变成了严重低薪现象的温床。</p><p>谷村女士就职的这家图书馆是由自治体运营的。八成以上的图书管理员都是非正式聘用职员，只有两成左右是公务员。而非正式雇用的图书管理员，无一例外都拿着仿佛计算好的等于最低生活水平的收入，签订了有期限的雇用合同。</p><p class="note note-primary">日本派遣工真的难绷</p><p>一直生活在不安之中的谷村女士烦恼再三后做了一个决定——为了取得学艺员资格，她从4月起成了通信制大学的一名学生。一个因为公共机关的非正式雇用而烦恼的人，为了摆脱贫困却选择了去取得学艺员资格，这让我感到吃惊。然而这恰恰是大多数老实认真的贫困者的行为模式。想要取得医疗行政或看护类资格的人也属同类。</p><p>为了消除心中的不安，贫穷的人们不会去思考其中的原因，反而会着魔似的浏览那些印着各种职业资格的免费传单。然后，他们会为了取得那些难度较低的资格而开始学习。学习自然会花费一定的费用和时间，所以他们的生活会更加窘迫。可就算谷村女士学有所成，真的取得了学艺员的资格，能从事的也只有不存在生产行为的文化事业，她想要实现过上普通人生活的愿望，可能性依然很低。</p><p>她这样做不仅赚不回那些为了摆脱贫困而投入的时间和金钱，很可能招致相反的效果。最后增添更多烦恼，陷入恶性循环。被地方自治体非正式聘用，还在为了取得资格而学习的谷村女士，照这样下去，恐怕没有未来可言。</p><p class="note note-primary">有一个纪录片也讲过因学致贫，或者说穷人做什么都能难翻身</p><p>如果连一个有3个孩子的贫困家庭都得不到最低生活保障，那我们的社会保障制度还有什么意义呢？</p><p>最低生活保障是一种求生手段啊，在日本生活真是太容易了，哈哈。</p><p>听着村上女士的遭遇，我想起自己身边有一个熟人刚好在接受最低生活保障。他和孩子两个人组成了父子家庭，已经接受了10年以上的最低生活保障了。<br>虽说算不上有钱人，但他住在都内超繁华地段，有一辆高级车，时不时还能从他身边一个接一个的恋人手上拿点零花钱，总之一直过着逍遥自在的无业生活。偶尔见面，他总是赞叹最低生活保障制度是一项多么美好的制度。</p><p class="note note-primary">这一段有点不理解，真实性感觉不好说，可能只是个例</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;提倡同薪同酬也好，实施住房扶持政策也罢，或者是实现男女平等也行，无论哪种形式，只要能将普通女性的可支配收入增加3万～5万日元，或者让她们的实际收入能和男性有相同程度的增长，从事风俗业的女性都会大幅减少。女性不断流入卖身世界的现状，现今不再是个人问题，而是已演变成一个国家的问</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>明亮的夜晚</title>
    <link href="https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%98%8E%E4%BA%AE%E7%9A%84%E5%A4%9C%E6%99%9A/"/>
    <id>https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E6%98%8E%E4%BA%AE%E7%9A%84%E5%A4%9C%E6%99%9A/</id>
    <published>2023-12-27T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.622Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我一度认为自己的优点就是善于忍耐。得益于这份忍耐，我取得了超出自己能力的成绩。为什么要忍耐到超过自己的限度呢？难道是认为应该证明自己的存在吗？是从什么时候开始，总感觉生活不是应该用来享受的，而是用以执行的呢？生活就像一个生存游戏面对着汗牛充栋、难且无趣的习题集搞题海术，制作纠错本、考试、得分、晋级。我不知道哪种生活方式才不需要证明自己的存在。在我看来，不被任何成绩证明的自己和没有价值的垃圾没什么两样。这一信条让我绝望，也让我一直都过分努力。那些认为自身存在本身就有意义和价值的人是没有必要证明自己的存在的，但我从一开始就不是那样的人。</p></blockquote><p class="note note-primary">这段自我怀疑的描写真贴切啊</p><blockquote><p>祖母的记忆中，自己从没收到过曾祖父送的任何一件小礼物。出来避难的时候，他也是睡在最好的地方，什么东西都不会让给女儿。</p><p>祖母穿着薄薄的外套冻得瑟瑟发抖，他都没想过脱下自己的外套给祖母。由于对曾祖父的这些行为太过熟悉，祖母甚至都感受不到生气。</p><p>祖母和南善的关系也因为这种熟悉才能维系。祖母无法把一个体贴的男人、在夫妻关系中不计得失的男人想象成自己的伴侣。比起期待和失望，祖母选择了放弃，因为这样做要容易得多。完全放弃了对丈夫的期待，彻底死心，于是这样的生活也变得可以忍受。</p><p>喜子有时会来信，祖母却几乎没有回过信。给喜子写信时，祖母会觉得哪里出了很大的问题。越是对自己诚实，就越难以承受那种心情。之前隐约感受到的那些情感和想法在写信的时候变得越发清晰，而这只会威胁到祖母的日常生活。</p><p>明淑奶奶寄来的信，祖母也没有回信。信里流露出的明淑奶奶的爱让祖母感到吃力。</p><p>因为读着明淑奶奶的信，就会知道，原来自己也是想要得到别人的爱的人；就要承认，原来自己也是非常热切地、急切地需要被爱的人。南善的话再刻薄也能忍受，但是读到明淑奶奶的信，祖母的心里总是很难受。是爱让祖母流泪了，是爱触动了连侮辱和伤害都无法撼动的祖母的心。</p></blockquote><p class="note note-primary">这个心里描写太细腻了，别人对自己的爱，会让自己怀疑现在过的生活太糟糕而难以忍受，哎</p><blockquote><p>姐姐和我骑着自行车下山。姐姐踩着踏板，我紧紧抱住她的背。姐姐身上散发出草莓泡泡糖的味道。好舒服、好平静的感觉，我已经不记得自己什么时候悲伤过，什么时候痛苦过。“不要走！”为了抓住这个瞬间，我大声叫起来.</p><p>“不要离开我，姐姐！”</p><p>接着，天空倒过来了，我看到吊在操场单杠上的中学时代的我。她总是想方设法地拖延回家的时间。我能像读纸上的宇一样读懂她的内心。现在她觉得，和她在一起的孩子们都以她为耻。她在跟自己说悄悄话：“我长得太丑了，没有人喜欢我。”</p><p>“不是那样的”正想告诉她的时候，有人把我拉到了后面。睁开眼，又是深夜了。</p><p>深夜的公共汽车上，我爱的人坐在我身边。二十二岁的我对他充满了 渴望，不知所措，但我知道他很快就会开口说要离开我。他终于开口了。“我知道，我知道。我就知道你会这样说。我知道，我知道。”他下了公共汽车，我还在这样说着，“我知道，我知道，你们最后都会离开我……”</p><p>我好想醒来。我按了下车铃，汽车却设有停下。我喊司机，用拳头拼命砸门，车还是不停。没有人看我。背后传来玄关门关上的声音。我知道那是丈夫离开我后关门的声——我以为只有你只有你不会离开我。我坐在地板上颤抖着了起来。</p><p>“智妍啊。”</p><p>这时，掉了两颗门牙的八岁的姐姐过来拍着我的背。</p><p>“智妍啊，智妍啊。</p><p>姐姐叫着我，世界越来越明亮。</p><p>太阳好像越来越大了。</p><p>我忘了刚才还在哭的事，对姐姐说：“太亮了，好刺眼。怎么这么亮呢？”</p><p>听我这样说，姐姐像是听到什么有趣的故事一样，在明亮的光线里大声笑起来。</p><p>“傻瓜。”</p><p>姐姐说。</p><p>“傻瓜，我从没离开过你。”</p></blockquote><p class="note note-primary">这一段的走马灯描写太好了，闪回人生中最痛苦的几个碎片，现实和虚幻交织，感染力太强了</p><blockquote><p>只听他的呼吸声，祖母就知道曾祖父要为此事责骂自己。对着卧病在床的祖母，曾祖父口若悬河地责怪起她来，嫌她无能，没能把丈夫留在熙岭。自己抓不住男人的心，现在被人抢走了，没什么好委屈的。</p><p>祖母闭着眼睛，忍受着他言语的鞭答。</p><p>“这句话你再说一遍。”</p><p>坐在一旁的曾祖母平静地说完，起身朝他走去。</p><p>你若敢再说第二遍，我就跟你拼命。再敢这样说英玉，就从我们眼前消失吧！</p><p>你算什么，敢这样跟我说话？要不是我你早就…</p><p>是，要不是你，我可能根本活不成。我并不是不知道这一点，所以我才能跟着你过了这么多年。你一直当我是来讨债的对吧？觉得是我欠你的。</p><p>当着自己丈夫的面你竟敢！</p><p>是我让你逃跑的吗？是我让你批弃自己的父母的吗？是我要和你结婚的吗？凭什么我一辈子都不能说个“不”字呢？我犯了什么罪？就因为我是白丁的女儿？那你不要管我就是了。我们英玉，我的命根子英玉也要成为你的出气筒，她这么难受你还要出言羞辱她。如果非要让我看到这一幕，当初还不如把我留在三川。不要和我拉上任何关系!</p></blockquote><p class="note note-primary">曾祖母真的解气啊</p><blockquote><p>虽然用眼睛看不到，但这个世界上一定有一个没有得到真心道歉的人们的国度。那里生活着这样的一群人- 想要的东西并不多，只希望得到真心的道歉，希望对方承认自己错误的人；凄然注视着对方，希望对方就算是装装样子，至少装作很抱歉的人；心如死灰地想着，如果对方从一开始就是可以道歉、不会让自己受到这种伤害的；再也无法像以前那样安然入睡的人；被别人质问 “为什么这么控制不住 自己的感情，一定要表露出来”的人；面对着无法得到任何人理解的高墙而束手无策的人；在众人畅谈的酒桌上像疯子一样放声大哭、让所有人惊慌失措的人。</p></blockquote><blockquote><p>那天的大海不再是祖母印象里熙岭的大海。既不是思念着明淑奶奶、新雨大婶和喜子，觉得自己好像被囚禁在照岭的年幼的祖母的大海，也不是抱着发烧的妈妈瑟瑟发抖地去找医院的途中看到的汹涌冷酷的大海。那一天祖母不需要看任何人的眼色，只是尽情地笑着，喊着。</p></blockquote><p class="note note-primary">又是一处对比描写，相当精彩</p><blockquote><p>我经常想起新雨大婶对金喜子博士说过的话—尽可能地走远一些。这句话指的绝不仅仅是物理上的距离，大婶一定是希望自己的女儿能去另一个维度的世界。她希望在自己所感受到的现实重力无法起作用的地方，女儿能够变得更加轻松，更加自由。我久久地思考着她的这份心意。</p></blockquote><p class="note note-primary">母爱啊/(ㄒoㄒ)/~~</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我一度认为自己的优点就是善于忍耐。得益于这份忍耐，我取得了超出自己能力的成绩。为什么要忍耐到超过自己的限度呢？难道是认为应该证明自己的存在吗？是从什么时候开始，总感觉生活不是应该用来享受的，而是用以执行的呢？生活就像一个生存游戏面对着汗牛充栋、难且</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>秋园</title>
    <link href="https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%A7%8B%E5%9B%AD/"/>
    <id>https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%A7%8B%E5%9B%AD/</id>
    <published>2023-12-27T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.651Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自序-厨房里的写作"><a href="#自序-厨房里的写作" class="headerlink" title="自序 厨房里的写作"></a>自序 厨房里的写作</h1><p>标注(黄色) - 第 5 页·位置 34</p><p>然而，自从写作的念头浮现，就再也没法按压下去。洗净的青菜晾在篮子里，灶头炖着肉，在等汤滚沸的间隙，在抽油烟机的轰鸣声中，我随时坐下来，让手中的笔在稿纸上快速移动。在写完这本书之前，我总觉得有件事没完成，再不做怕是来不及了。</p><p>标注(黄色) - 第 6 页·位置 37</p><p>常常才写几行，泪水就模糊了眼睛。遥远的记忆被唤起，一些消失了的人与事纷至沓来，原本零星散乱、隐隐约约的回忆，在动笔之后互相串联，又唤醒和连接起更多的故事。我也感到奇怪：只要提起笔，过去那些日子就涌到笔尖，抢着要被诉说出来。我就像是用笔赶路，重新走了一遍长长的人生。</p><p>标注(黄色) - 第 6 页·位置 42</p><p>我一遍又一遍地重写这个故事，稿纸积累了厚厚一摞。出于好奇心，我称过它们的重量——足足八公斤。书写的过程，温暖了我心底深处的悲凉。</p><p>标注(黄色) - 第 6 页·位置 44</p><p>人到晚年，我却像一趟踏上征途的列车，一种前所未有的动力推着我轰隆轰隆向前赶去。我知道自己写出的故事如同一滴水，最终将汇入人类历史的长河。</p><h1 id="第一章-洛阳-南京"><a href="#第一章-洛阳-南京" class="headerlink" title="第一章 洛阳 南京"></a>第一章 洛阳 南京</h1><p>标注(黄色) - 第 19 页·位置 220</p><p>一九三七年深秋，一艘轮船停泊在汉口码头上等待靠岸。浓雾笼罩着宽阔的江面，看不到江水和天空，也看不到不远处的其他船只，天地之间只剩浓白的雾。远方，一小片浓雾深处闪烁着淡白的光亮，那是太阳在照耀，可灼热锐利的阳光亦穿不透浓雾。间或有汽笛鸣响，那声音孤单、凄清，如盲人般在雾中胡乱摸索、碰撞。</p><p>标注(黄色) - 第 20 页·位置 242</p><p>过吊桥时，年轻的秋园抱起子恒，迈着轻捷的步子走了过去。从前的生活，也远远地留在了吊桥那边。</p><h1 id="第二章-山起台"><a href="#第二章-山起台" class="headerlink" title="第二章 山起台"></a>第二章 山起台</h1><p>标注(黄色) - 第 27 页·位置 332</p><p>仁受当乡长期间，为了帮人买壮丁或救济穷人，有时连秋园的嫁妆、金银手饰也拿去变卖。本就不多的家当渐渐被贴得精光，他真正成了穷光蛋——穿在身上，吃在嘴里。</p><h1 id="第四章-黄泥冲"><a href="#第四章-黄泥冲" class="headerlink" title="第四章 黄泥冲"></a>第四章 黄泥冲</h1><p>标注(黄色) - 第 51 页·位置 650</p><p>仁受戴着眼镜，穿着长袍，走路笨拙，动作缓慢得像怕踩死蚂蚁一样，碰到人早早就露出谦和的微笑。他平时菜草不分、五谷不辨，完全是个书呆子，又有了五十岁，从头学种田谈何容易。事实证明，种田真不容易，起码没副强壮的身体就不行。不要说犁田、耙田这些技术活，仁受因有疝气痛，不能站久，一般的手脚功夫都做不了。</p><p>标注(黄色) - 第 67 页·位置 883</p><p>这次我可能会被枪毙。历届的乡长都枪毙了，保长也枪毙了几个。我死了，你们不要难过。我虽没做过迫害老百姓的事，但总是替国民政府做过事，罪有应得。国民党确实腐败，我深有体会。共产党看来是真为穷人、为百姓办事，现在穷苦人都分了田、分了房，人人都有饭吃、有衣穿。人民政府好，你们要听政府的话，千万不要做对不起政府的事。你们的妈妈跟着我冇享过一天福，我很对不起她，只有来世报答。我死了，她更可怜。你们要好好地孝敬妈妈，听妈妈的话。”</p><p>标注(黄色) - 第 77 页·位置 1027</p><p>听到狗叫声，杏梅母亲从灶屋里急急地走了出来。看到她们，她一边在围腰上使劲擦着手，一边小跑着来迎接，喊声“梁老师”，抓着秋园的手便往屋里走。无论是仁受被划成旧官吏、没收东西，还是满娭毑喋喋不休地咒骂，秋园从没哭过。她总是对细伢子们说：“我们不哭，懒得哭，哭也冇用。”可是此时此刻，秋园泪如泉涌，连忙用手去抹。</p><h1 id="第六章-跑"><a href="#第六章-跑" class="headerlink" title="第六章 跑"></a>第六章 跑</h1><p>标注(黄色) - 第 145 页·位置 1976</p><p>秋园哭道：“阳间有恶人，阴间有恶鬼，逃过一劫又一劫，不知我前世造了什么孽，今生今世要受这么多苦难！”</p><p>标注(黄色) - 第 146 页·位置 1985</p><p>这一年，秋园五十多岁。少年丧父，中年丧偶，晚年丧子，人生三大悲事都让她摊上了。</p><h1 id="代后记-解命运的谜"><a href="#代后记-解命运的谜" class="headerlink" title="代后记 解命运的谜"></a>代后记 解命运的谜</h1><p>标注(黄色) - 第 171 页·位置 2322</p><p>活着的理由，就是为了过那种不死不活的漫长日子做准备。”</p><p>标注(黄色) - 第 171 页·位置 2323</p><p>我见过非洲大草原上的牛羚横渡马拉河的情景。对牛羚来说，它们的命运就是渡过马拉河，河水会让它们一再跌倒，只要意志力稍微退却，可能连求生的意念都会放弃。</p><p>标注(黄色) - 第 171 页·位置 2325</p><p>外婆、妈妈这些被放逐到社会底层的人们，在命运面前显得如此渺小无力，仿佛随时会被揉碎。然而，人比自己想象的更加柔韧，她们永远不会被彻底毁掉。当之骅——我的妈妈——在晚年拿起笔回首自己的一生，真正的救赎方才开始。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;自序-厨房里的写作&quot;&gt;&lt;a href=&quot;#自序-厨房里的写作&quot; class=&quot;headerlink&quot; title=&quot;自序 厨房里的写作&quot;&gt;&lt;/a&gt;自序 厨房里的写作&lt;/h1&gt;&lt;p&gt;标注(黄色) - 第 5 页·位置 34&lt;/p&gt;
&lt;p&gt;然而，自从写作的念头浮现，就</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>长安的荔枝</title>
    <link href="https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D/"/>
    <id>https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E9%95%BF%E5%AE%89%E7%9A%84%E8%8D%94%E6%9E%9D/</id>
    <published>2023-12-27T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><blockquote><p>杜甫把毛笔抢过去，不及研墨，直接蘸了酒水，唰唰写了起来。一会儿功夫，纸上便多了一首五言古诗：出门日已远，不受徒旅欺。骨肉恩岂断，男儿死无时。走马脱辔头，手中挑青丝。捷下万仞冈，俯身试搴旗。</p><p>杜甫把笔“啪”地一声甩开，直直看向李善德，眼神锐利如公孙大娘手中的剑器。“骨肉恩岂断，男儿死无时。既是退无可退，何不向前拼死一搏？”李善德读着这酒汁淋漓的诗句，握着纸卷的手腕，突地一抖，仿佛有什么东西在胸中漾开。</p></blockquote><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h1><blockquote><p>既然路上有人管吃住，上林署支给的所谓“驿使钱”与“出食钱”，其实是用不着。使职的妙处就在这里，它超脱诸司流程之外，符宝司不会跟上林署对账，上林署也没办法问户部虚实，三处彼此并不联通。</p></blockquote><blockquote><p>就算失败，我也想知道，自己倒在距离终点多远的地方。</p></blockquote><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h1><blockquote><p>在这一刻，他忘记了等待的贵妃，忘记了自己未知的命运，忘记了长安城市的香积贷，只想纵情歌舞，像当年一样跳一曲无忧无虑的胡旋舞。只见夜色之下，跃动的篝火旁边，一个胡子斑白的老头单脚旋转，状如陀螺，飘飘然如飞升一般。峒人们一边欢呼着，一边围在四周，像鸭子一样摆动身子，齐声高歌。歌声穿行于荔枝林间：</p></blockquote><blockquote><p>“石榴酒，葡萄浆，兰桂芳，茱萸香。愿君驻金鞍，暂此共年芳，愿君解罗襦，一醉同匡床。文君正新寡，结念在歌倡。昨宵绮帐迎韩寿，今朝罗袖引潘郎。莫吹羌笛惊邻里，不用琵琶喧洞房。且歌新夜曲，莫弄楚明光。此曲怨且艳，哀音断人肠。”</p></blockquote><blockquote><p>后来两人成婚，他还时时回味起那一天奔走在华山上的感觉。今日这荔枝的口感，竟和那时如此相似。怪不得圣人和贵妃也想吃新鲜荔枝，他们也许想重新找回两人初识时那种脸红心跳的感觉吧？</p></blockquote><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h1><blockquote><p>可光有想法还不成，具体到执行，至少涉及二十多个州县的短途供应，何处调冰，何处接应，如何屯冰，冰块消融速度是否赶得及等等，不尽早规划，根本来不及……灵感源源不断，毛笔勾画不断，李善德此时进入了一种道家所谓“入虚静”的奇妙状态，过往的经验与见识，融汇成一道大河，汪洋恣肆，奔腾咆哮。这一刻，他不是一个人在计算，陈子、刘徽、祖冲之、祖暅在这一刻魂魄附体。李善德的眼睛满布血丝，却丝毫不觉疲倦，恨不得撬开自己脑壳，一磕到底，把脑浆直接涂抹在纸卷之上。</p></blockquote><blockquote><p>李善德跟他约略讲了遭遇。鱼朝恩笑道：“别说大使你，就连圣人有时候要做点事，那一班孔目小吏都会夹缠不清，文山牍海砸将过来，包管叫你头晕脑胀。”</p><p>“正是如此！”李善德忙不迭地点头，他今天可算领教到了。</p><p>“他老人家为何跳出官序，额外设出使职差遣？还不是想发下一句话去，立刻有人痛痛快快去办成嘛。唉，堂堂大唐皇帝竟这么憋屈，我们这些做奴婢的，看了实在心疼啊。”鱼朝恩喟叹一声，用手里的白须拂子轻轻抹了下眼角。李善德赶紧劝慰几句，鱼朝恩复又振颜道：“我这个宫内副使的职责，正是内廷采买。岭南的新鲜荔枝，既然是圣人想要，那便是我份内的责任了。你放心好了，这件事我一定勾管到底。”</p></blockquote><blockquote><p>你若在呈上转运法之时，附上一份谢表，说明此事有岭南经略使着力推动、度支同仁大力支持、太府司、司农寺、尚食局助力良多，你猜鱼朝恩还敢不敢抢你的功 —— 良元兄呐，做官之道，其实就三句话：和光同尘，好处均沾，花花轿子众人齐抬。一个人吃独食，是吃不长久的。”</p></blockquote><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h1><blockquote><p>李善德接了牌子，又讨问手书，以方便给相关衙署行去文牒。杨国忠一怔，不由得哈哈大笑：“你拿了我的牌子，还要照章发牒，岂不坏了本相的名声？——流程，是弱者才要遵循的规矩。”</p><p>李善德唯唯诺诺，小心地把牌子收好。其实，杨国忠不给手书，还有一层深意。倘若李善德把事情办砸了，他只消收回银牌，两者之间便没任何关系，没有任何文书留迹，切割得清清楚楚。李善德想不到那么深，只觉得右相果然知人善用。他忽然想到一事，高兴地补充道：“这次转运，所费不赀。有岭南胡商苏谅愿意报效朝廷，国库不必支出一文，而大事可毕。”</p></blockquote><blockquote><p>李善德是做过冰政的人，很了解这个体系的秉性。每到夏日，上头说要一块冰，中间为求安全，会按十块来调拨。下头执行的人为了更安全，总得备出二十块才放心。层层加码，步步增量，至于是否会造成浪费，并没人关心。</p></blockquote><blockquote><p>所以右相要三十丛荔枝，到了都省就会增加到五十丛，转到经略府，就会变成一百丛，办事的人再打出些余量，至少也会截下两百丛。李善德无法苛责任何人，这与贪腐无关，也与地域无关，而是大唐长久以来的规则。</p></blockquote><blockquote><p>“你骗我！你骗我说给我带长安的酒，你骗我说没人会欺负我！你骗我说只砍十棵树！”阿僮似乎要把整个肺部撕来，浑身的血都涌上面颊，可随即又褪成苍白颜色。“我本以为你和他们不一样……”阿僮猛地推开李善德，一言不发地转头走开。她瘦弱的身形摇摇摆摆，像一棵无处遮蔽、被烈风摧残过的小草。</p></blockquote><blockquote><p>他痛苦地闭上眼睛，抖动缰绳，让马匹开始奔跑起来。可这样还不够，他拿起鞭子抽打着马屁股，不断加速，只盼着迅速逃离这一片荔枝林。可无论坐骑跑得有多快，李善德都无可避免地，在自己的良心上发现一处黑迹。在格眼簿子的图例里，赭点为色变，紫点为香变，朱点为味变。而墨点，则意味着荔枝发生褐变，流出汁水，彻底腐坏。</p></blockquote><h1 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h1><blockquote><p>马匹是从驿站刚刚轮换的健马，皮毛鲜亮，四蹄带劲，跑起来鬃毛和尾巴齐齐飘扬。可它背上的那位骑士却软软趴在鞍子上，脸颊干瘪枯槁，全身都被尘土所覆盖，活像个毫无生命的土俑。一条右腿从马镫上垂下来，无力地来回啷当着。与其说这是活人，更像是捆在马革上的一具丧尸。</p></blockquote><blockquote><p>至于驿站附近的农户，他们在负担日常的租庸之外，突然要再服一期额外的白直徭役，没人愿意。没关系，那么只消缴纳两贯荔枝钱，便可免除这个劳役。“如此一来，国库、内帑两便，不劳一文而转运饶足，岂不是比你那个找商人报效的法子更好？”</p></blockquote><blockquote><p>“哼，只是个例罢了，又不是个个都逃。李善德，你到底想表达什么？”</p><p>“右相可知道。为了将这两坛新鲜荔枝送到长安城，在从化要砍毁多少成树？三十亩果园，两年全毁。一棵荔枝树要长二十年，只因为京城贵人们吃得一口鲜，便要受斧斤之斫。还有多少骑手奔劳涉险，多少牧监马匹横死，多少江河桨撸折断，又有多少人为之丧命？”</p><p>“右相适才说，不劳一文而转运饶足，下官以为大谬！天下钱粮皆有定数，不支于国库，不取于内帑，那么从何而来？只能从黄草驿馆、从化荔园榨取，从沿途附户身上征派。取之于民，用之于上，又谈何不劳一文？”</p><p>“你！你疯了！”杨国忠挥起月杆，狠狠砸在了李善德的头上，登时打出一条深深的血痕。</p><p>李善德不避不让，目光炯炯：“为相者，该当协理阴阳，权衡万事。荔枝与国家，不知相公心中到底是如何权衡，圣人心中，又觉得孰轻孰重？”月杆再次挥动，重重地砸在李善德的胸口。他仰面倒了下去，口中喷出一口血来。“滚！滚出去！”</p></blockquote><blockquote><p>我原本以为，把荔枝平安送到京城，从此仕途无量，应该会很开心。可我跑完这一路下来，却发现越接近成功，我的朋友就越少，内心就越愧疚。我本想和从前一样，苟且隐忍一下，也许很快就习惯了。可是我六月初一那天，靠在上好坊的残碑旁，看着那荔枝送进春明门时，发现自己竟一点都不高兴，只有满心的厌恶。那一刻，我忽然明悟了，有些冲动是苟且不了的，有些心思是藏不住的。”</p></blockquote><blockquote><p>“其实他去找杨国忠之前，跟我袒露过心声。这一次摊牌，一家人注定在长安城呆不下去。只要我反对，他便绝不会去跟右相摊牌。可这么多年老夫老妻了，我一眼就看出他内心的挣扎。他是真的痛苦，不是为了仕途，也不是为了家人，仅仅只是为了一个道理，却愁得头发全都白了。</p><p>二十多年了，他在长安为了生计奔走，其实并不开心。如果这么做能让他念头通达，那便做好了。我嫁的是他，又不是长安。”李夫人看向李善德的背影，嘴角露出少女般的羞涩，：“只要他肯背着我下山，无论是华山还是泰山，又有什么区别呢？”</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章&quot;&gt;&lt;a href=&quot;#第一章&quot; class=&quot;headerlink&quot; title=&quot;第一章&quot;&gt;&lt;/a&gt;第一章&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;杜甫把毛笔抢过去，不及研墨，直接蘸了酒水，唰唰写了起来。一会儿功夫，纸上便多了一首五言古诗：出门日已远，不</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>名侦探的牺牲读书笔记</title>
    <link href="https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%90%8D%E4%BE%A6%E6%8E%A2%E7%9A%84%E7%89%BA%E7%89%B2/"/>
    <id>https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%90%8D%E4%BE%A6%E6%8E%A2%E7%9A%84%E7%89%BA%E7%89%B2/</id>
    <published>2023-12-19T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.453Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li>若被人要求给养殖场出资十万，一般人不会突然掏钱。但是当被问及是出资一百万还是出资十万的时候，对方就会不可思议地感觉拿出十万也没什么大不了的。其实还有一个选项，那就是不出资，却隐没在两个选项中间无法看见。</li><li>“当信仰和现实发生抵触之时，信徒就会创造新的解释来解消抵触，通过进一步扩大活动来证明其正确性。从结果上看，信仰反倒得到了加强。如果要解释的话应该就是这么回事。</li><li>米勒派和塞德拉修女集团有一个共通点，那就是无论哪一边的信徒，都走投无路无法退缩。他们放弃了日常生活，抛弃私产，在世人异样的目光下等待语言化为现实的那一刻。事到如今再也无法回头的状况，令他们的信仰超越了现实。”</li><li>“起初就说过了，我是站在你们的立场上做的推理，在有奇迹的前提下查明凶手。也就是说，这是信教者的推理。但不巧的是，我并不相信你们的上帝，</li><li>比如看守富兰克林·帕尔泰坚信自己被切断的双腿已经恢复如初，但事实上只是固定着两根套着裤子的棍子，并没有长出脚。于是就产生出了自我感觉可以自由移动，但事实上没有轮椅就动弹不得的矛盾。为了让这一矛盾得到合理的解释，富兰克林便对轮椅萌生了强烈的依恋，誓言要与其长相厮守一直到死。干部们也给了他分配了不用腿的工作，看起来就是在配合他的解释。当然了，富兰克林和干部们都没有寻找解释的自觉。”</li><li>四年来，这个少年直面过去，思考的所有的可能性，自己则在空白的世界浪费了同样的时间，怎么可能和他平起平坐地交锋呢。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;若被人要求给养殖场出资十万，一般人不会突然掏钱。但是当被问及是出资一百万还是出资十万的时候，对方就会不可思议地感觉拿出十万也没什么大不了的。其实还有一个选项，那就是不出资，却隐没在两个选项中间无法看见。&lt;/li&gt;
&lt;li&gt;“当信仰和现实发生抵触之时，信</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>大医读书笔记</title>
    <link href="https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%8C%BB/"/>
    <id>https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E5%A4%A7%E5%8C%BB/</id>
    <published>2023-12-19T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.494Z</updated>
    
    <content type="html"><![CDATA[<h1 id="上册"><a href="#上册" class="headerlink" title="上册"></a>上册</h1><ul><li>若要救人，非得红十字会前来营救；若要红十字前来营救，非得俄国人认可其身份；若要俄国人认可其身份，得先让大清加入万国红十字会……一群卑微平民的命运，在层层推动之下，竟奇妙地与国际局势牵连到了一块，这已完全超出了这个乡村少年的理解范围。</li><li>中国人所谓的活着，并不只是个人的追求与获得。”吴尚德在辽阳做了许多年医生，早洞悉了世情，“倘若这孩子现在抛弃父亲与乡亲离开，即使他还活着，他的灵魂也已经死了。</li><li>大大小小的事情，在地球每一个角落发生着。之前的旧因，正在落实为果；未来的果，此刻也正种下新因。因果涨落，缘数纠葛，无数人的抉择，汇聚成了一股不可抗拒的全球风暴。</li><li>姚英子忽然转过身来，背对着夕阳。飞旋飘散的乌黑长发，短暂地遮住了她精致的面孔，只有那一双清澈的眸子露在外面，映着半明半暗的云霞。最高明的画师，也调不出此时此刻她双眼中的颜色。</li><li>这一次因为皖北水灾，城里的行人明显变少，店铺也大部分上了门板，门口只留着一根拴驴桩子。其实敲敲门的话，店主全家多半还在，只是所有人都不举火烛，不发声响，像乌龟般缩在壳子里，巴望着灾难早点结束。</li><li>“凡大医治病，必当安神定志，无欲无求，先发大慈恻隐之心，誓愿普救含灵之苦。若有疾厄来求救者，不得问其贵贱贫富，长幼妍蚩，怨亲善友，华夷愚智，普同一等，皆如至亲之想，亦不得瞻前顾后，自虑吉凶，护惜身命。见彼苦恼，若己有之……如此可为苍生大医。”</li><li>张校长说过，她在广东搞医院时，发现农村的广大女性普遍思想蒙昧，满脑腐朽观念。与其跟她们说大道理，不如从最根本的活命权去启发。她们再愚昧，也希望能活下去，而想要活下去，不争取权利、不打破传统陋习是不可能的。</li></ul><h1 id="下册"><a href="#下册" class="headerlink" title="下册"></a>下册</h1><ul><li>这座寺庙就在徐家汇路北端，号称千年古刹，不过眼下的建筑是光绪七年（一八八一年）才重修完成的。寺前有一条英国人修的有轨电车道，可以直达外滩。孙希查了一下时刻表，下一班电车还有半个小时才来。他突然冒出一个古怪的念头：要不……我再去静安寺里求一个签？看看我抛下老方对不对。说来讽刺，人越是彷徨，往往越是迷信，他们会天真地寄希望于某种天启降临，将自己的抉择正当化。</li><li>原来……原来老方玩命似的打工赚钱，不是因为什么小气，而是因为他要养活整整一个村子的幸存者，要替父亲赎罪。霎时间，一幕幕景象浮现在孙希的脑海里：赶驴套车的方三响、收拾条凳的方三响、在食堂咸菜就米饭的方三响、一枚枚数着角洋的方三响。</li><li>盐谷忽然指了指自己胸口：“你知道吗？我的，是黑龙会的成员，北一辉先生的信徒。北先生常说，欲要日本革命，必先有中国革命的成功，然后推动整个亚洲天翻地覆，日本才有推展革命的土壤。所以我才以赤十字社成员的身份前来武昌，还有好多像我这样的日本人，以不同的身份参与到里面来。”</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;上册&quot;&gt;&lt;a href=&quot;#上册&quot; class=&quot;headerlink&quot; title=&quot;上册&quot;&gt;&lt;/a&gt;上册&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;若要救人，非得红十字会前来营救；若要红十字前来营救，非得俄国人认可其身份；若要俄国人认可其身份，得先让大清加入万国红十字会……一</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>绝叫读书笔记</title>
    <link href="https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BB%9D%E5%8F%AB/"/>
    <id>https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/%E7%BB%9D%E5%8F%AB/</id>
    <published>2023-12-19T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.654Z</updated>
    
    <content type="html"><![CDATA[<hr><ul><li><p>结婚率下降，不婚族增加，再加上高龄化现象，社会构造的变化使得首都周边的卫星都市在不知不觉中转变为“孤独死之城”。这或许是意料中的结果，但负责善后的警察可头大了。</p></li><li><p>当时没有什么《两性工作平等法》，也没有内勤与外勤之分，许多女性都认为公司不过是另一种形式的联谊场所。至于以倒茶打杂为主的“工作”，也只是换个形式的新娘课程罢了。</p></li><li><p>如果真的幸福，根本不需要动不动就挂在嘴上；如果真的幸福，根本不会叹气，皮笑肉不笑的。她口中的“幸福”，隐藏着某种不安定的暗潮。</p></li><li><p>你的母亲、小纯的师长与同学，简直就是在共同创作一幅《小纯理想死亡图》。尽管小纯的成绩很好，却是个口无遮拦的讨厌鬼，不仅被霸凌，最后还赌气自杀——不，这不是他，他是聪明、前途一片光明的杰出人才，人缘极好，某日却出了车祸，英年早逝。</p></li><li><p>什么包容、社会福利，说得倒简单。秀才遇到兵，有理说不清。如果打打官腔敷衍了事，换来的就是当地住户的噩梦。怎么可以助纣为虐，叫无辜的邻居忍气吞声？真是岂有此理。</p></li><li><p>自行车是你唯一的交通工具，家乡就像狭小的金鱼缸，不论去哪里，你都无法摆脱这种窒息感。</p></li><li><p>说起来，凡人就是这么一回事。经历着酸甜苦辣，年复一年过着安稳的生活。</p></li><li><p>“没错。姐，你又不是自愿当爸爸和妈妈的小孩的，不是吗？我也是啊，相信爸爸和妈妈也是。就跟雨水只是从天上滴下来一样，没有人能选择自己生在哪里，而刚好生在同一个家庭的人就叫‘家人’，如此而已。”</p></li><li><p>不管山崎的外形多阴柔，他都是男性，离婚后可以马上再婚。</p></li><li><p>是铃木阳子的第二任丈夫河濑干男，根据车祸记录，撞死他的卡车司机叫新垣清彦。车祸发生七个月后，铃木阳子再婚，第三任新郎正是新垣清彦。车祸记录中备注的户籍一致，因此，司机跟新郎是同一人，而非同名同姓。新垣清彦与铃木阳子结婚后，依然逃不过被卡车撞死的命运。而撞死他的人，就是铃木阳子的第四任丈夫沼尻太一。也就是说，这些车祸的肇事者都与铃木阳子结婚，然后成为下一个被害人。她的最后一任丈夫沼尻太一死于八木德夫的车轮下，从户籍来看，这个人还活着。若将三起车祸记录对照来看，任谁都看得出案情不单纯，但三起车祸的事发地点为不同县市，分别由不同辖区的警员处理，导致至今没有任何人把这三起意外拿来比对。</p></li><li><p>我真是个超级大傻瓜。你觉得自己简直无药可救。那些原本深信地球是宇宙的中心，后来才发现地球竟然绕着太阳转的人，大概就是这种心境吧。</p></li><li><p>假结婚比一般人想象中简单多了。只凭区区一张健保卡，就能神不知鬼不觉地办理结婚手续，连当事者都不知情。</p></li><li><p>被大自然的力量玩弄于股掌带给你直觉上的恐惧，而想象自己被瓦砾压成肉酱则是精神上的恐惧。这两种恐惧使你的情绪异常亢奋。</p></li><li><p>不知是不是情绪太过亢奋的缘故，直到深夜你仍睡不着，而且觉得时间过得很慢，仿佛自己被全世界抛弃，独自品尝这孤单的夜晚。躺着躺着，你又开始觉得身体在摇摇晃晃，莫非身体还忘不了地震的感觉？你似乎看见日光灯在空中摆荡，墙壁在扭曲变形。世界并没有震动，而是你的世界受到了撼动。对，这里是我的世界，是独一无二、只属于我的世界。</p></li><li><p>“姐姐，你终于发现了。</p><p>”“是啊。”“其实，你大概很久以前就知道真相，只是现在才察觉。”</p><p>“小纯，你说得没错，一切都是自然现象。”</p><p>“是啊。”“无论是生死或是人心，一切都是冥冥中注定的，毫无道理可言。”</p><p>“是啊。”</p><p>“因此，没有一件事是我能做主的。如何诞生，如何生存，如何死亡，连一根头发落往何方，我都无法干涉。”</p><p>“是啊。”</p><p>“不仅无法做主，我也无法猜透。”</p><p>“面对世界上的任何事情，我们既无能又无知，因此，没有一件事情是有意义的。何谓美丑，何谓是非，都是人类擅自解读的，没有正确答案。”“是啊。”“换句话说……”你字斟句酌，寻找最贴切的字眼。如果世界上有神，假如他从天上看人间，大概是一条单行道吧。世界是自然现象的集合体，星球的运转轨迹早已注定，万事万物的结局也早已定案。没有分歧，没有选择，只是一条单行道，而人类就是在单行道上滚动的石头。</p><p>身为无知的人类，反而能逆转早已注定的命运。既然无法做主，无法预知任何结局，那就有无限的可能性。无知又无能为力，不就代表选哪个选项都没差别，因此选择范围无限大？“就是自由。”“是啊，姐姐，你是自由的。”自由。这就是你归纳出来的结论。人类这种自然现象的本质就是自由。人可以做任何事，也可以不做任何事。善恶好坏因果报应，都只是无意义的标签罢了。</p><p>“没错啊。姐姐，你很了解前因后果嘛。人不是通过战斗争取自由，而是人生来自由，所以才要战斗；人生来自由，所以才要活下去。姐姐，你能自由地活下去，自由死亡，自由战斗，自由放弃，所有的选项都在你面前，不必管法律与道德，想选什么就选什么。这是一个无法选择的世界，可是你拥有无限的选择。”</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;结婚率下降，不婚族增加，再加上高龄化现象，社会构造的变化使得首都周边的卫星都市在不知不觉中转变为“孤独死之城”。这或许是意料中的结果，但负责善后的警察可头大了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当时没有什么《两性工作平等法》，也没有内勤与外勤之</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>2023年终总结 桌游篇</title>
    <link href="https://rorschachandbat.github.io/%E9%9A%8F%E7%AC%94/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20%E6%A1%8C%E6%B8%B8%E7%AF%87/"/>
    <id>https://rorschachandbat.github.io/%E9%9A%8F%E7%AC%94/2023%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93%20%E6%A1%8C%E6%B8%B8%E7%AF%87/</id>
    <published>2023-12-19T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="毛线"><a href="#毛线" class="headerlink" title="毛线"></a>毛线</h1><h2 id="scout"><a href="#scout" class="headerlink" title="scout"></a>scout</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/85fb34e40c190a13b0104fe5bab5967.jpg" alt="快要赢了的洋洋得意"></p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/d97561aa0793f242728c5bf5d01b3e1.jpg" alt="翻车的破防"><br>打牌游戏，简单的升级加了一个不能理牌但是可以强化卡组的设定，就变得十分有趣，这一年起码开了有七八次吧，每一次都是欢声笑语，这个游戏很容易最后一把翻车，上图就是一场我大意失荆州的搞笑画面。</p><h2 id="幻想国度"><a href="#幻想国度" class="headerlink" title="幻想国度"></a>幻想国度</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/ac134377b623e62c376335b9a594712.jpg"></p><p>玩法相当简单的卡牌游戏，一句话就能说完：抓一打一，最后比得分的多少。还有一款漫威换皮版也是这个机制，但是添加了一个反派堆所以我感觉没有原版那么好玩，只能说毛线非常看人，国庆和高中同学玩的时候非常上头，基本上每次玩我都要调侃一下，这么好玩的机制，我们来做个原神版，一定大卖（大雾）。</p><h2 id="the-crew（领航员）"><a href="#the-crew（领航员）" class="headerlink" title="the crew（领航员）"></a>the crew（领航员）</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/531047e924930296bac75869b139849.jpg"></p><p>其实我很喜欢吃墩这个机制，预测加打牌规划对我来说有很强的趣味性，既可以恶心人也可以精算，玩过非常多种竞争的吃墩游戏了，比如巫师牌，巫师牌极限版，盒中猫，tichu，否决权，但是领航员作为一款合作吃墩真的很有意思，每一关都有不同的机制，并且交流是有限制的，这就相当考验队友的默契程度，满分！</p><h2 id="瞎掰王"><a href="#瞎掰王" class="headerlink" title="瞎掰王"></a>瞎掰王</h2><p>这个可以算是年度毛线游戏了，详细的介绍可以看这个<a href="https://www.douban.com/note/850771070/">连接</a>，我还甚至还写了一个小程序来玩这个瞎猜游戏，直接用扑克牌就可以玩，相当有节目效果的一个嘴炮游戏，推的每个局都欢声笑语。</p><h2 id="猩猩相惜"><a href="#猩猩相惜" class="headerlink" title="猩猩相惜"></a>猩猩相惜</h2><p>这个游戏熟人局的效果爆炸，玩法就是轮流对三个问题暗自给出自己的答案，问题大概是一些三观题，比如你觉得是否自己是个坚强的人，答案在五个里面选择，觉得是，是，可能，不是，绝对不是。然后其他人来猜测回答者的答案，给出自己的答案，最后来判断大家的贴合程度，</p><p>p.s.这个游戏也可以用我的小程序来玩，回答就用扑克牌的1-5代替即可，相当好玩的语言毛线，大家快和好朋友试试吧~</p><h2 id="狼人真言"><a href="#狼人真言" class="headerlink" title="狼人真言"></a>狼人真言</h2><p>狼人杀和猜词机制完美的结合！第一次玩无感，时隔多年再次玩重新点燃了我对这款游戏的热爱，既有猜词的脑洞也有身份推理的紧张，因为先知不能暗示的太明显，狼人也不能捣乱的太明显，所以整个局面会非常混乱但又有趣，总之就是开多少次都不会腻的游戏。</p><h2 id="NANA"><a href="#NANA" class="headerlink" title="NANA"></a>NANA</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/6c64103d9f5ebf26116ace0c796e324.jpg" alt="扑克牌就可以diy"></p><p>又是一款记忆小游戏，规则很简单，要么翻某人的牌，要么在桌上的公共牌堆翻牌，谁先凑齐三组或者两组和或差为7或者一组7就能获胜。</p><p>这个游戏刚在北京玩的时候不太感冒，五一的时候和汤圆的朋友们一起玩相当的上头，整整开了两个小时，所以不得不在年度总结中提上一嘴了。</p><h2 id="签签入扣"><a href="#签签入扣" class="headerlink" title="签签入扣"></a>签签入扣</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/22d56d036bd43a3714b4b0c699b62cf.jpg" alt="22d56d036bd43a3714b4b0c699b62cf"></p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/72be64616afc84ec30ddc55adc56342.jpg" alt="72be64616afc84ec30ddc55adc56342"></p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/d985db468343d3a99832bd75c992b9c.jpg" alt="d985db468343d3a99832bd75c992b9c"></p><p>初次玩到这个游戏是两年前在一个桌游店和路人玩的，今年重新捞出这个游戏，开了好多好多次。和汤圆来北京复试的小区楼下玩</p><p>了，那天阳光很好；和北京桌游局在清华玩了，那天风很大，我们笑得很开心；回家和阿咩zzh，和我妈我弟开了一把，老妈竟然要求多玩几次，听到这句话的时候我真的又开心又感动。</p><p>不管什么游戏，只要能开起来，有互动性，能让大家开心，就是好游戏，强烈推荐这款动手的游戏！</p><h1 id="中策"><a href="#中策" class="headerlink" title="中策"></a>中策</h1><h2 id="nova-luna"><a href="#nova-luna" class="headerlink" title="nova luna"></a>nova luna</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/467b6f03dbb8381509e411b5d497b1c.jpg"></p><p>乌老师的拼图小游戏，打出combo的感觉相当爽，而且长得也好看，玩！</p><h2 id="太空基地"><a href="#太空基地" class="headerlink" title="太空基地"></a>太空基地</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/a6e8475281daefb8dda6f6ca11a5c66.jpg"></p><p>这个游戏线下开了一把之后就完全沉迷于在bga玩了，总共打了一百三十多把，虐过各种老外，也见识了各种套路，这个游戏好玩的地方在于刷分套路相当多，你可以走速推流，可以走换家流，可以走大大大流……当投资扔到自己重仓的区域的时候的爽感真是不可描述的，当然陈医经常说垃圾运气游戏哈哈哈。</p><p>附上一份大佬记录的套路图：</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/3e9c61e5120d155e8cfaa4fc863f3b25_.png"></div><div class="group-image-wrap"><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/b7fa3113e7527e41614bd40f9f4358f2_.png"></div></div></div><h2 id="诡镇奇谈"><a href="#诡镇奇谈" class="headerlink" title="诡镇奇谈"></a>诡镇奇谈</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/bc9bdac0a8080fdd402c91944036de3.jpg"><br>买了许久的诡镇奇谈终于开起来了！其实来我们基本不怎么玩美式，一是因为美式都太贵，二是很少玩合作类型的游戏，打了一个教学本和一个普通本，一开始直接不怕死地选择了困难难度，直接被虐的死去活来，升级卡组之后我们直接教邪神做人，我有预感这个游戏我们会开很久，出了八个扩展呢，慢慢玩！有一段话很喜欢，摘录如下：</p><blockquote><p>一个AHLCG玩家应该具备克苏鲁精神。就是作为一个普通人，在无情命运和残酷现实的压迫下，如何努力挣扎求生，打好自己的一手烂牌，最后坦然的面对不可名状的恐怖力量。<br>这个游戏的主基调就是残酷，这和让玩家开无双虐怪的游戏不同，玩家在游玩过程中不必刻意追求卡组强度，阵容搭配和完美结局,每个人不可能出生就是五边形战士，不可能在做出错误决定后让时间倒流，世界上也不存在完美结局。无所畏惧地向前，谱写自己独特的故事才是这个游戏的精髓。</p></blockquote><h1 id="重策"><a href="#重策" class="headerlink" title="重策"></a>重策</h1><h2 id="沙丘"><a href="#沙丘" class="headerlink" title="沙丘"></a>沙丘</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/6768c1ea0b2576a497c4354c36b0607.jpg" alt="五一回家前在kfc的最后一把沙丘"></p><p>工放dbg游戏，唯一的缺点就是阴谋牌和能力牌的收益方差实在太大（尤其是阴谋牌），所以有点过于看运气，于是陈医破防了说再也不开了哈哈哈。</p><h2 id="电力公司"><a href="#电力公司" class="headerlink" title="电力公司"></a>电力公司</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/4cce774e967d330906c7d2899abf750.jpg"></p><p>经典德式！印象中开了好多次，融合了抢点，拍卖，路径规划以及资源循环多种机制的扎实老德式，这个游戏最奇妙的一点是胜利条件不是看谁的电厂多或者是钱多资源多，而是终局结束那一回合的发电数量多少，相当有意思的设计，今年大概开了三四把，好玩。</p><h2 id="勃艮第城堡"><a href="#勃艮第城堡" class="headerlink" title="勃艮第城堡"></a>勃艮第城堡</h2><p>五一的时候去桌游店学会了，就深深地爱上了这款游戏，和太空基地一样，也是骰驱的策略游戏，不过勃艮第的可控性更强一点，这个游戏的精髓就在于你不可能每一样都做好，并且要做好抗风险能力，掌控运气的感觉，相当令人着迷。</p><p>这个游戏也是在bga上玩了好多把，很搞笑的一件事，一个大佬经常在群里分享勃艮第的胜利截图，然后配上一句险胜。</p><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/6e21b6d7977360ef9ff905cdd96de58.jpg" alt="“险胜”"></p><h2 id="领国者"><a href="#领国者" class="headerlink" title="领国者"></a>领国者</h2><p><img src="https://gitee.com/jiang_liyong/cloudimage/raw/master/images/40b76647337df332062c23ce9ecba82.jpg"></p><p>领国者，与其说是游戏不如说是宏观经济模拟器，完全可以用作教材的一个桌游，据说作者为了设计好这个桌游专门去修了政治学和经济学的硕士，佩服佩服。</p><p>游戏生动形象地刻画了每个阶层的生活轨迹：</p><p>劳动阶级好好打工，建立工会，保证自己的失业率不要过高，满足基本的生存需求并尽量使自己的民众富足，对剥削表达抗议、罢工、示威，参与议题，向共产主义靠近。</p><p>中产阶级中庸而立，左右逢源，需要平衡各方势力与各项政策，潜心发展。事业上既要有自给自足的小微产业，还要兢兢业业给资本主义和国企打工。力求最终过上自给自足的小资生活。</p><p>资本阶级则要努力扩大自己的产业，崇尚自由贸易，生产货物即可出口也可内需。扩大开放，降低赋税，降低人力成本，利润最大化永远是资本追逐的目标。</p><p>政府像一个束手无措的家长，施展各项政策，平衡各方势力，救济、补助、控制、影响，通过宏观的调控努力维持这国家这艘大船颤颤悠悠的前进。</p><p>游戏相当复杂，主要体现在不对称的差异化以及每轮面临茫茫多的选择与关联。相当于每个人都要学习自己的一套规则，意味着你换一个角色就是一套全新的玩法。开荒局的时候，读规setup就用了两小时，第一轮又打了两个小时，打了三轮直接掀桌了，期待某天能重新开完这个游戏。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>篇幅所限还有很多想推荐的就不写了：比如榴莲，眠羊时间，农场主玩了这么久桌游，也逐渐摸清了自己的喜好，喜欢那些有互动性能开起来的游戏，喜欢让大家都有参与感的游戏，喜欢能让大家欢声笑语的游戏拒绝。</p><p>翻着一张张桌游的照片，总能精准地回忆起每一次玩的场景，甚至是局势的走向，快乐的记忆总是这么的鲜明，因为玩桌游的时间总是那么宝贵，能一起玩桌游的同伴更是难得，再次感恩陪伴我这一整年的好朋友们。</p><p>其实公司也有桌游局，但是我基本不怎么去，或许我不是喜欢桌游，而是喜欢和好朋友们玩桌游，感谢每一个愿意听我讲规则，愿意学规则，愿意陪我村陪我破防的朋友们，明年我们继续快乐地桌游！！</p>]]></content>
    
    
    <summary type="html">今年大大小小玩了六十多个桌游，回顾一下那些反复开过的以及玩过一次就觉得很惊艳的游戏。</summary>
    
    
    
    <category term="随笔" scheme="https://rorschachandbat.github.io/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
  </entry>
  
  <entry>
    <title>如何完成你的第一个游戏</title>
    <link href="https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%88%B6%E4%BD%9C%E6%B8%B8%E6%88%8F/"/>
    <id>https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%88%B6%E4%BD%9C%E6%B8%B8%E6%88%8F/</id>
    <published>2023-12-11T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.748Z</updated>
    
    <content type="html"><![CDATA[<h3 id="完成游戏"><a href="#完成游戏" class="headerlink" title="完成游戏"></a>完成游戏</h3><p><img src="http://www.derekyu.com/tumblr/finishgame01.jpg" alt="图片"></p><p>在我努力完成<a href="https://href.li/?http://spelunkyworld.com/">自己的游戏</a>时，我一直在思考如何完成项目。我注意到有很多才华横溢的开发者在完成游戏时遇到了困难。老实说，我在身后留下了一长串未完成的游戏……我想每个人都有这种情况。无论出于何种原因，并非每个项目都会成功。但是，如果您发现自己一直在退出具有很大潜力的游戏项目，那么可能值得退后一步并研究为什么会发生这种情况。</p><p>对于至少一款游戏、漫画书、电影等，我们都有过这样的感觉：“哎呀，我可以做得比这更好！这被高估了。” 但重要的是退后一步并意识到，嘿，他们投入了时间来完成一个项目，而我没有。这至少是他们可能比我更擅长的一件事，这可能就是他们得到我没有的认可的原因！如果您将完成视为一项技能，而不仅仅是过程中的一个步骤，那么您不仅可以承认这是您可以做得更好的事情，而且可以承认哪些习惯和思维过程会妨碍您。</p><p>我不相信有一种正确的方式来制作游戏。这是一项创造性的努力，所以没有什么硬性规定不能在某个时候被打破。但作为一个与其他游戏开发者讨论过这个问题的游戏开发者，我觉得我们在某些时候都会陷入一些心理陷阱，尤其是在我们刚开始的时候。意识到这些陷阱是完成某件事的重要第一步。（在你和我之间，编纂这些想法也是我掌握这些想法的部分方式！）</p><p>因此，事不宜迟，这里列出了完成游戏的 15 个技巧：</p><p><strong>1. 选择一个有潜力的想法</strong></p><p>**<img src="http://www.derekyu.com/tumblr/finishgame02.jpg" alt="图片"><br>**</p><p>我发现有三种类型的游戏能激起我的兴趣：我想制作的游戏、我想做的游戏和我擅长制作的游戏。</p><p><em>我想做</em>的游戏是过程本身看起来很有趣的游戏。也许这个机制看起来真的很有趣，或者也许有一个我真的想要动画的角色。</p><p><em>我想制作</em>的游戏是我对结果比达到目标更感兴趣的游戏。也许这是一个“无限制”的概念（“天啊，GTA 符合最终幻想符合星际争霸……”）或者只是一个实施起来不一定有趣的巧妙想法。</p><p><em>我擅长制作</em>的游戏是适合我的个性并且我有制作经验的游戏。也许有某种类型是你自然而然地被吸引的，并且你非常了解它的节奏和流程。</p><p>在我看来，最有潜力（至少要完成）的想法属于所有三个类别，并且也满足“我有时间和资源来实际制作”的要求。</p><p><strong>2.真正开始该死的游戏</strong></p><p>写下你的想法并不是开始该死的游戏。编写设计文档并不是开始该死的游戏。组建一个团队并不是开始该死的游戏。即使做图形或音乐也不是开始该死的游戏。“准备开始该死的游戏”与“开始该死的游戏”很容易混淆。请记住：该死的游戏可以玩，如果您没有创造可以玩的东西，那不是该死的游戏！</p><p>所以该死的，即使创建一个游戏引擎也不一定开始该死的游戏。这让我想到了下一个技巧……</p><p><strong>3. 如果不需要，不要使用自己的技术</strong></p><p>编写自己的引擎有利有弊。但是问问自己，你真的需要吗？你想做的事不可能用已经存在的东西去做，还是你会重新发明轮子？当然，如果您编写自己的引擎，您可以按照您喜欢的方式使其完美。但老实说，你多久会通过引擎进入游戏本身？您是否发现自己制作游戏引擎的频率高于制作游戏的频率？</p><p><a href="https://href.li/?http://www.yoyogames.com/make">我在Game Maker</a>中制作了 Spelunky 的原始版本，正是那个“完成”的游戏最终让我有机会在 Xbox 360 版本上工作。所以永远不要觉得游戏制作软件或其他简化工具在某种程度上是非法的。重要的是比赛。</p><p><strong>4. 原型</strong></p><p>这与＃2：原型首先与您可用的任何东西有关。有时你会立即发现这是一个坏主意。有时你会偶然发现一个更好的主意。无论哪种方式，在我真正开始做某事之前，我通常都很难弄清楚我想要做什么。所以做点什么吧！</p><p><strong>5. 确保核心机制是有趣的</strong></p><p>寻找有趣的核心机制。执行最基本的交互应该很有趣，因为这是玩家在玩游戏时会做的最多的事情。最终，您希望这个核心来推动您的发展。这将使您在以后必须删减部分游戏时更容易（#13）-您将始终拥有这个核心可以回退。</p><p>在进行原型设计时，您可能会发现一个比您最初认为的核心机制更有趣的机制 - 考虑将其作为新的核心机制！</p><p><strong>6. 选择好的合作伙伴（或尽可能独自工作）</strong></p><p><img src="http://www.derekyu.com/tumblr/finishgame02b.jpg" alt="图片"></p><p>找到一个好的游戏制作伙伴就像在很多方面约会。您可能认为最重要的是技能：“哦，酷，我是程序员，而这家伙是艺术家……让我们这样做吧！” 但是不，还有其他事情需要考虑，比如个性、经验、时机和共同利益。就像一段浪漫的关系一样，你不想处于一个你或另一个人都不那么专注的位置。用一些较小的项目互相测试一下，因为当一个关键人物在数月或数年的开发后退出时，这真的是毁灭性的。</p><p>完成项目的另一个好处是，您的合作伙伴会知道您的能力，并且会更自在地与您合作。很难说服任何有经验的人单独与你一起处理一个想法，考虑到很少有想法真正看到了曙光（以及在一些想法被执行之前很难看到它们的价值）。好的合作伙伴会希望看到您完成的游戏。所以完成他们！</p><p>或者，找到免费的图形和音乐在线使用，至少作为占位符（在 The Independent Gaming Source 我们举办了<a href="https://href.li/?http://www.derekyu.com/tigs/assemblee/">一场比赛</a>，其中创作了很多免费的艺术和音乐）。如果必须，请使用 ASCII。作为一名艺术家，我知道我更愿意为一个已经完成但缺少艺术的项目做出贡献。如果你需要一个编码器……考虑学习自己编码（如果我能做到，你也可以！）或者选择一些游戏制作软件（参见#3）。</p><p><strong>7. 研磨是正常的 - 将其纳入您的计划</strong></p><p>很多游戏制作都是乏味且毫无乐趣的。这不是玩，而是工作（这就是为什么当有人开玩笑说你“整天玩游戏”时，你应该让他们窒息）。在某些时候，你会突然意识到，当你计划你的项目和原型设计时，你从未想过这些东西——比如菜单、屏幕转换、保存和加载等等。我在想象我要创造的这个神奇的世界，或者我要试验的这个有趣的机制……我没想到我会花几周时间制作看起来不像垃圾的功能菜单！” 或者，你知道，有一些小剂量的东西很有趣，比如动画角色，当你意识到你已经为自己设置了 100 个不同的角色时，这会变成噩梦。</p><p>一旦你经历了几次，你就会意识到扩展你的项目是多么重要，这样你就不会在这个不可避免的泥潭中花费太多时间（“太多时间”是指在你退出之前需要多长时间). 你也会意识到很多无聊的东西是让游戏感觉完整的原因！例如，一个漂亮的标题屏幕可以让游戏感觉合法。</p><p><strong>8. 使用奖项、竞赛和其他活动作为真正的截止日期</strong></p><p>当 Alec 和我在<a href="https://href.li/?http://www.bit-blot.com/aquaria/">Aquaria</a>工作时，独立游戏节的提交截止日期迫使我们对所采取的方向做出艰难的决定，这也迫使我们更现实地看待我们的日程安排。如果我们没有那个最后期限，我不完全确定我们会完成！参加比赛非常棒，因为截止日期非常真实，而且奖励（认可、奖励、可能是金钱）非常真实。此外，他们可以为您提供一种与志同道合的人社区联系的方式。</p><p><em>链接：<a href="https://href.li/?http://igf.com/">独立游戏节</a>，<a href="https://href.li/?http://www.ludumdare.com/">Ludum Dare</a></em></p><p><strong>9. 向前推进</strong></p><p>感觉卡住了？向前推进。开始在下一个级别，下一个敌人，下一个任何东西上工作。它不仅有助于激励目的，而且您还想了解整个游戏将如何进行。就像写作一样——你不想一个接一个地读一遍，在继续之前确保每个句子都是完美的。把大纲画下来。</p><p><strong>10. 照顾好您的身心健康</strong></p><p>**<img src="http://www.derekyu.com/tumblr/finishgame03.jpg" alt="图片"><br>**</p><p>当您专注于完成比赛时，照顾自己可能会非常困难。但老实说，不睡觉、不锻炼或不正确饮食只会对你的游戏造成伤害。充其量，你正在阻止自己充分发挥自己的潜力，并让你更有可能退出。对你的项目有一些怀疑是很自然的，但抑郁或生病则不然。当您的身心感觉像垃圾时，您会多么不想为您的梦想项目工作，这真是令人惊讶！</p><p><strong>11.停止为重新开始找借口</strong></p><p>**<img src="http://www.derekyu.com/tumblr/finishgame04.jpg" alt="图片"><br>**</p><p><em>“我的代码一团糟。而且我已经学到了很多。如果我重新开始，我可以做得更好更快，然后比赛的其余部分也会更快！”</em></p><p>停止。不。在每款游戏的开发过程中的某些时候都是如此。你的代码总是一团糟。你会学到很多东西。它永远不会是完美的。如果你从头开始，当你再次到达这一点时，你会发现自己处于完全相同的境地。这样想是一个可怕的陷阱。</p><p>开个玩笑：一个人一生都在研究一个如此完美的游戏引擎，他所要做的就是按下一个按钮，完美的游戏就会诞生。其实，这不是什么玩笑，因为妙语是他永远不会完成它！不存在这样的引擎或游戏。</p><p>如果糟糕的组织真的让你慢下来，回去做一些手术，让你感觉更好。如果它有效但它有点hacky，那么勇敢并继续前进！</p><p><strong>12. 为下一场比赛保存它</strong></p><p>所以在开发的过程中，你有一个很棒的新想法，它会让每个人都大吃一惊，但你必须重做整个游戏来实现它？为下一场比赛保存它！正确的？希望这不会是你制作的最后一款游戏。把它留到下一个……但先完成这个！</p><p><strong>13. 剪裁。它。出去。</strong></p><p><img src="http://www.derekyu.com/tumblr/finishgame05.jpg" alt="图片"></p><p>哎呀，你的进度太落后了。你有所有这些想法，但它们会在你有机会实施其中一半之前殖民火星。哦，不幸的是你……但是等等！</p><p>嗯，这很棒，事实上！因为现在你被迫决定什么对你的游戏真正重要，以及你可以削减什么。事实是，如果我们都有无限的资源和无限的时间，我们都会做出同样的糟糕，曲折一切游戏，根本没有理由玩。是我们有限的资源和时间迫使我们制作紧凑的游戏，感觉它们有目的。</p><p>如果您一直在构建一些可证明很有趣的核心概念，请继续削减，直到您到达该核心的最边缘。其他一切可能只是你可以没有的绒毛。或者更糟的是，是绒毛阻止人们看到你游戏中最好的部分。</p><p><strong>14. 如果你退出了，缩小规模，而不是扩大规模</strong></p><p>好吧，有时是时候叫它退出了。也许你永远无法完成，而你所拥有的东西太大了，无法删除任何东西。也许你团队的其他成员已经退出了。我写这份清单的希望是帮助人们避免这种可能性，但是，嘿，也许你刚刚从这样的项目中走出来。有时……狗屎就发生了。</p><p>如果无法挽救它，至少要确保缩小下一个项目的规模。即使您的项目完成得越来越少，也很容易将您的目标设定得越来越高。“我的技能在进步！我正在从失败中吸取教训，”这是一个常见的借口。但我认为这就是为什么将完成作为一项技能也很重要的原因。</p><p>所以再往下，往下，往下，再往下，你甚至会发现它在你的下方。例如，与其从 4x 太空模拟跳到 4x 太空模拟 IN 3D，不如尝试制作一款专注于太空模拟的一个小元素的出色游戏。如果你做不到，试试小行星之类的东西。很有可能它最终仍然会是一场比你想象的更大的斗争（和&#x2F;或比你想象的更有趣）！</p><p><strong>15. 最后 10%</strong></p><p>他们说最后 10% 真的是 90%，这是有道理的。最终需要很长时间的细节。当然，也许你在一周内编写了一个称职的战斗系统……但是让它变得很棒并使它变得复杂（并且没有错误）……这些事情可能需要几个月的时间。诚实的事实是，在您到达真正的最后一圈之前，您可能会进行多次“最后一圈”冲刺。</p><p>如果这听起来令人沮丧，那不应该。虽然最后 10% 令人痛苦，但我也发现这是开发过程中非常令人满意的时刻。因为通常情况下，如果你一直在适当地度过你的时间，那么事情最终似乎真的会“聚集在一起”，将一堆杂乱无章的想法和内容变成甜蜜的游戏甘露是一种神奇的感觉。</p><p>这都是关于细节的。</p><p><strong>最后……释放！</strong></p><p><img src="http://www.derekyu.com/tumblr/finishgame06.jpg" alt="图片"></p><p>废话，你发布了一个游戏！恭喜，你刚刚升级了，很重要。好处包括：增加信心，能够完成项目的声誉，以及对游戏创作整个过程的理解！不过，最好的部分是你有一个不错的小游戏，我可以玩和享受！我确实喜欢玩游戏，几乎就像我喜欢制作它们一样。</p><p>不要再站在场边，朋友：你是一个游戏开发者。</p>]]></content>
    
    
    <summary type="html">关于如何完成你的第一个游戏</summary>
    
    
    
    <category term="游戏设计" scheme="https://rorschachandbat.github.io/categories/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>DOOM启示录</title>
    <link href="https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/DOOM%E5%90%AF%E7%A4%BA%E5%BD%95/"/>
    <id>https://rorschachandbat.github.io/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/DOOM%E5%90%AF%E7%A4%BA%E5%BD%95/</id>
    <published>2023-12-11T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:53.331Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>作为年轻一代，卡马克和罗梅洛是“美国梦”的样板：他们是自我塑造的个体，他们用自己的 热情点燃了一种新的艺术形式、一种文化现象，并在商业上获得巨大成功。他们的经历使他 们成为叛逆的偶像，他们既是计算机黑客，同时也名列《财富》杂志（Fortune）评选的 500 佳企业管理者；他们被誉为游戏界的列侬（Lennon）和麦卡特尼（McCartney），尽管他们 更乐于被看做金属乐队（Metallica）。他们在少年时逃出他们各自破碎的家庭，制作出了历史上最有影响力的游戏，最终，也正是这些游戏，使得他们分道扬镳。而在接下来的几分钟 里，在作别多年之后，他们又要一起出现在玩家们的面前了。 </p></li><li><p>可以发现，卡马克的成功是因为技术，从卷轴技术到3d设计，他出色的完成了图形学游戏引擎的部分，然而游戏设计的部分，前者灵感来源于马里奥，后者做了一个经典2D游戏的3D版，这在当时是一个质一般的飞跃，然而如今想要有技术上的打动似乎很难，更要追求玩法和创意了。</p></li><li><p>死一般的寂静，没有人能接受这样的结果：这个游戏，这个在什里夫波特湖畔小屋里制造出无数欢声笑语的游戏，这个在麦迪逊陪伴他们度过一个个寒冷冬夜的游戏，就这么结束了？悲伤笼罩着房间的每一个角落。最终，罗梅洛开口对卡马克说道： “靠，那么好玩的游戏，就这么毁掉了？有什么办法能继续吗？ ”他其实知道这个问题的答案，卡马克是个实事求是的人，他的游戏也一样，他回答道： “没有，都结束了。 ”  </p></li><li><p>“你这份 Doom 圣经对我们完成这个游戏没有帮助， ”卡马克告诉汤姆， id 从来没有写过什么设计文档，为什么现在要开始写这玩意？ Doom 不需要背景故事，它是一个关于追逐和战斗的游戏，只要让玩家随时觉得紧张刺激就好，玩家不需要知道屏幕上正在发生的这一切都是为什么。卡马克建议汤姆不要再为那文档操心，而应该像罗梅洛一样来体验新的引擎， “我还在做各种技术尝试，但是，请先体验一下现有的东西，再去考虑我们究竟能用它来做什么。”他还建议汤姆去图书馆翻翻关于军事基地的书，找找灵感。</p></li><li><p>罗梅洛同意卡马克的建议，尽管他非常欣赏汤姆的文档，但一个由故事驱动的游戏显然不适合卡马克的引擎，在那个世界里没人会有空坐下来打牌， Doom 和《德军总部 3D》一样，也是个快节奏的杀戮游戏，只是， Doom 要比《德军总部 3D》更快，更血腥。汤姆彻底放弃了在游戏里加入情节的念头，而另有一段情节即将在现实中发生。类似卡马克对待程序那样的思想模式——创新、优化、挪开所有绊脚石——已在 id 短暂的历史里不断闪现：在游戏中，《基恩》因为《德军总部 3D》而被摒弃，地板和天花板因为性能而被去除，在生活中，艾尔、斯科特、甚至咪子，一一成为了这种模式的牺牲品。没有人知道谁会成为下一个。  </p></li><li><p>政客和卫道士们总是试图拯救下一代于水火之中，尽管他们不一定理解年轻人的文化，但这并不妨碍他们运用他们所把持的话语权和立法权。早在美国内战结束时，宗教领袖们就把艳情小说指为： “撒旦门下最能干的爪牙，它们毒害年轻人的心灵，以扩张它们邪恶的领地。 ”进入二十世纪后，电视和电影又成为了新的标靶，针对这些全新媒介的调查研究一连持续了几十年。五十年代，电视上的猫王（Elvis Aron Presley）只能出现上半身，《MAD》杂志的创办者威廉·盖恩斯（William Gaines）被国会传唤。七十年代，龙与地下城里的魔鬼与巫术被和撒旦崇拜（Satanism）联系到一起，尤其是在密歇根湖事件发生后，反对的声音更是一浪高过一浪。八十年代，重金属文艺工作者“犹大牧师”和“Ozzy Osbourne”被指控为教唆年轻听众自杀。九十年代，电子游戏成了新的“乐与怒”，也成了卫道士们心中更强烈、更无法抑制的痛。  </p></li><li><p>这种敌视心理可以上溯至三十年代，那时的弹球厅一贯被视做是地痞流氓聚集的地方。纽约市长 Fiorello La Guardia 为此颁布了禁令，直到七十年代中期方才解除。接着被取缔的就是《死亡飞车》，这款碾压屏幕上像素点的游戏一度成为报纸头条。八十年代初是电子娱乐业的黄金时代，它的总产值达到六十亿美元。随着电子游戏的日益普及，一些人心中的担心也开始疯长，他们觉得这些游戏对孩子们有潜在的不良影响。</p></li><li><p>1982 年，家庭－教师协会（PTA）发布了一份谴责街机游戏的声明： “遍地开花的电子游戏厅对经常光顾那里的年轻人是有害的，我们对此非常担心……初步调查表明，这些乌烟瘴气的场所大都集中在学校附近，许多游戏厅并不限制学生们在上课时间出入其中，这无疑是旷课和逃学的诱因。在这些几乎不受监管的场所，贩毒、吸毒、酗酒、赌博、帮派活动，以及其他不良行为得以孳生。 ”</p></li><li><p>一些城市，譬如德克萨斯州的麦斯奎特、伊利诺斯州的布拉得利、乔治亚州的斯乃尔维尔，开始限制或是取缔街机厅。 1982 年，布拉得利的市长看到“几百个青少年聚集在街机厅里抽大麻”，他随后得出结论： “孩子们把书费、午餐费，以及每一个能弄到的硬币都投进了那些花花绿绿的机器。 ”尽管美国最高法院驳回了麦斯奎特市试图取缔电子游戏的起诉，但其他国家，譬如马来西亚、新加坡、印度尼西亚，不光颁布了电子游戏的禁令，还强制关闭了街机厅。  </p></li><li><p>学校、企业、政府机关这些配备有计算机的地方现在都装上了调制解调器，也就是这些地方，有着许多懂得如何使用这些设备的人，他们无一例外被卷入了 Doom 狂潮。就在那个周末，大量的下载和玩家之间的对战导致因特网出现了前所未有的拥塞。玩家们争先恐后地连入美国在线。 “那天晚上就像是一场暴动， ”美国在线的游戏板块负责人德比·罗杰斯（ Debbie Rogers）回忆道： “要不是中间隔着电话线，我肯定都被这些疯狂的人们踩扁了。 ”</p></li><li><p>Doom 发布后几小时，卡内基梅隆大学（Carnegie-Mellon’s）的计算机系统管理员发布了一份在线通知： “自从今天 Doom 发布后，学校的网络就出现了异常情况，经过分析，我们认为是这款游戏导致了网络过载……校方请所有 Doom 玩家们不要进行对战，那样会给网络带来很大流量，我们校园网的负载已经接近极限。我们可能会强行断开进行 Doom 对战的机器。再重复一遍：玩 Doom 时切勿使用对战模式。 ”</p></li><li><p>英特尔（Intel）公司在发现网络异常后立刻禁止员工在公司运行 Doom。德克萨斯 A&amp;M 公司把网络服务器上的 Doom 全部删除。路易斯维尔大学的机房管理员为了解决 Doom 带来的困扰甚至专门写了个软件，他介绍说： “学生们为了玩这个游戏在机房外排起长队，于是我们写了一个小程序，它会遍历每一台机器，并删除之上的 Doom。  </p></li><li><p>他们注意到，《德军总部 3D》的模式制作是完全替换游戏本身的资源文件，譬如把纳粹的图片换成巴尼的图片，如果玩家想再换回到纳粹，就相当麻烦。于是，在 Doom 中，卡马克进一步抽象了引擎和数据文件之间的关系，他专门制作了一个资源管理子系统，把数据都放到所谓的 WAD 包中，这个名词是汤姆的点子，意为：数据都在哪？（Where’s All the Data?），从而，在每次主程序启动时，它载入的是一个包含了所有图片和音乐的 WAD 文件，这样，玩家就可以每次指定不同的 WAD 文件让引擎使用，而不必再像《德军总部 3D》那样麻烦地备份和恢复数据。</p></li><li><p>此外，卡马克还公布了 Doom 关卡编辑器和其他辅助工具的源代码，以便玩家们定制自己的游戏。这不光在游戏领域是个非常激进的做法，就任何形式的媒介而言，它都算得上前卫。这就像是涅槃乐队的唱片里附带了工具以便让你用自己的声音替换科特·科本（ Kurt Cobain），或是《洛奇》（Rocky）录像带允许你把费城的街景换成中世纪的日本。以前也有游戏发布过关卡编辑器，但还没有哪个公司的程序员——更不要说是老板本人——公开过如<br>此核心的技术。尽管卡马克暂时没有放出引擎本身的源代码，但他提供给玩家们的工具已足以让他们对游戏进行彻底修改。这不只是慷慨大方，这关乎世界观——这体现了自由主义里授权予民从而削弱垄断控制的思想。卡马克已不再是那个在堪萨斯城家中向往着黑客文化的孩子了，二十三岁的他现在是一个百万美元公司的所有者，他可以做任何他想做的事，他可以身体力行地去铸就黒客文化的辉煌。</p></li><li><p>“DeHackEd 可以彻底颠覆 Doom 的玩法， ”刘易斯在文档里写道： “譬如使火球隐形、使火箭弹的伤害增加到 2000 点、使怪物们漂浮在空中、使你那水深火热中的太空战士拥有无限弹药，它还可以在游戏里加入全新物品，譬如离子地雷、超级连发武器、极速火箭，这样你就可以设计出全新的死亡竞赛规则，而且你可以把这些改动都放到一个补丁文件里发给朋友，WAD 开发者们可以在关卡里加入新的怪物……一切的一切。 ”</p></li><li><p>这些黒客工具使游戏的“沉浸感”有了新的含义。 Doom 本身已使玩家沉浸于快节奏的三维世界，沉浸于可以互相对抗的死亡竞赛；而黒客工具则使他们沉浸于创作的乐趣，当玩家先勾画出整个世界的蓝图，然后设计出各种生命形态、并定义出这世界的物理规则时，他其实是在扮演上帝的角色。玩家们开始在因特网上互相免费交换自己创造的世界，这些因为死亡竞赛而离开课堂的玩家们现在找到了新的嗜好：创作。他们不分昼夜地忙碌，他们甚至赤膊上阵：泰勒大学的一些玩家定期举办“天体创作营”，在那期间，他们一个个都扒得精光坐在计算机面前。 Doom 不止是一个游戏，它是一种文化。  </p></li><li><p>罗梅洛自有解释：慢工出细活，他在每一个关卡上都花了大量的时间。但卡马克怀疑另有原因：罗梅洛失去了他的专注。除了那些访谈和死亡竞赛外，罗梅洛现在还是 Raven 公司下一个游戏的监制。他曾经告诉卡马克，他要把引擎的经济效益发挥到极致： “我们用这技术多做几个游戏吧，那样可以赚到更多的钱，把引擎授权给 Raven，他们很棒，他们肯定可以制作出精彩的游戏，然后我们来发行。 ”卡马克同意了，却毫不热心：要把公司做到多大才<br>算够？但罗梅洛不只是为了把公司做大，他还有其他动机——乐趣。罗梅洛热爱游戏，他活着就是为了玩游戏，而他现在找不到比 Doom 更好玩的游戏了，和 Raven 的合作将给他带来新的游戏。这天晚上，在卡马克的办公室里，罗梅洛向卡马克描绘了 id 的新生活：该是享受成功的时候了，不再有压榨模式，不再有加班熬夜， “不再有死亡进度。 ”他开心地说。</p></li><li><p>卡马克看着屏幕上闪烁的光标，一言不发。曾经有多少夜晚，罗梅洛就坐在他身边，和他一起完善引擎，和他一起调试排错，直到东方渐白；今夜，卡马克目送那印有“制作者”的背影消失在门口。  </p></li><li><p>而卡马克很快就意识到，他所面临的挑战远比他所预料的艰难。他的目标是创造因特网上的真三维世界，项目之初，他和往常一样收集和阅读了大量的研究资料，他花了几千美元购买书籍和论文，但所有这些都只是纸上谈兵的东西，还从未有过计算机程序可以模拟出一个交互的、实时的、快速的、真三维的游戏世界，要实现这样的虚拟体验，不光要耗尽他的才能，还要榨干当前 PC 机的性能。更糟的是，在这紧要关头，卡马克发现，他一直以来的战友，罗梅洛，不见了踪影。  </p></li><li><p>卡马克厌恶那种貌似先哲圣贤般的夸夸其谈，但如果你一定坚持，他也会聊聊他的想法。 “在信息时代，客观障碍已不复存在， ”他说： “所谓障碍都是主观上的。如果你想动手开发什么全新的技术，你不需要几百万美元的资金，你只需要在冰箱里放满比萨和可乐，再有一台便宜的计算机，和为之献身的决心。我们在地板上睡过，我们从河水中趟过。 ”</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;作为年轻一代，卡马克和罗梅洛是“美国梦”的样板：他们是自我塑造的个体，他们用自己的 热情点燃了一种新的艺术形式、一种文化现象，并在商业上获得巨大成功。他们的经历使他 们成为叛逆的偶像，他们既是计算机黑客，同时也名列《财富》杂志（Fortune）评选的 50</summary>
      
    
    
    
    <category term="读书笔记" scheme="https://rorschachandbat.github.io/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>如何向混蛋解释你的游戏</title>
    <link href="https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%A6%82%E4%BD%95%E5%90%91%E6%B7%B7%E8%9B%8B%E8%A7%A3%E9%87%8A%E4%BD%A0%E7%9A%84%E6%B8%B8%E6%88%8F/"/>
    <id>https://rorschachandbat.github.io/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/%E5%A6%82%E4%BD%95%E5%90%91%E6%B7%B7%E8%9B%8B%E8%A7%A3%E9%87%8A%E4%BD%A0%E7%9A%84%E6%B8%B8%E6%88%8F/</id>
    <published>2023-12-10T16:00:00.000Z</published>
    <updated>2024-11-30T06:37:52.922Z</updated>
    
    <content type="html"><![CDATA[<p><strong>解释你的游戏的第一个坏方法是根本不解释它。</strong>人们经常放出一些原始镜头或屏幕截图，让它自己说话。</p><p>问题是事实并非如此。如果您知道它说的是什么，它可能不言而喻，但您无法想象它对其他人来说意义不大。有时我们甚至无法判断您控制的是哪个<em>东西</em>。</p><p><strong>第二个错误是认为要解释你的游戏，你应该解释你的艺术意图。</strong></p><p>所以你可以将其描述为“关于损失的游戏”。</p><p>好的，但这他妈的是什么<em>意思？</em>据我所知，Off-Road Velociraptor Safari 可能是关于损失的。我认为瓷器店里的牛头怪确实是。</p><p>但是你的信息、你的主题和你的艺术意图并没有告诉我任何关于我如何玩这个游戏或者我可以在其中做些什么有趣或不同的事情。</p><p><strong>第三个错误是认为解释你的故事就解释了你的游戏。</strong>“暗日之民正受到远古诸神的威胁……”</p><p>除了创造“Darksun”这个词的人之外，没人在乎 Darksun 的人。我相信你的故事很好，我相信它对你的游戏很重要，但它不会用十个字来表达。如果你写的超过十个字，就没有人会看。</p><p><strong>错误四：</strong>说你的游戏很好，好像这会让我们相信它是好的。</p><p>从来没有人读过开发者将他们的游戏描述为“创新”并认为“哇，这听起来很创新。”</p><p>我们读过开发者将他们的游戏描述为创新和想法，“哇，它们听起来像一个工具。”</p><p>这些都是行不通的方法。那么你如何向像我这样不耐烦的混蛋解释一些微妙而酷的东西呢？</p><p>您必须以简单明了的语言非常快地切入要点。</p><p>事实上，你必须在大约三句话中说到四点，否则我们就停止阅读。</p><p><strong>第一点是告诉我们这是什么类型的游戏。</strong></p><p>您不必拘泥于传统类型，而是尝试使用能够反映您在游戏中实际所做的事情的词。也许它不是平台游戏，而是“2D 探索游戏”。</p><p><strong>第二点，在你说完第一句话之前，告诉我们它最酷的独特之处。</strong></p><p>你可以<em>彻底</em>总结。我们不需要知道它<em>是如何</em>工作的，但我们想知道它为什么酷。</p><p>我游戏中的主要机制很难用八个词来解释，但如果我说“你可以重新设计它的关卡来欺骗人们”，你就会明白了。</p><p><strong>第三点是给我们一些背景信息</strong>：我是谁，我在哪里，我想做什么？</p><p>情节永远不会用十个词来形容，但幻想可能。你是间谍？你是神吗？你在救小猫？你是猫神拯救间谍？所有这些都很酷。</p><p>到那时我们应该有一个概览，但它可能有点枯燥。<strong>所以第四点是给我们一个例子来说明它是如何发挥作用的。</strong></p><p>描述一个玩家可以体验到的典型游戏时刻，并说明您刚才告诉我们的最佳内容。</p><p>如果你说这是一个关于控制你的敌人的游戏，我很感兴趣。但如果你告诉我，我可以附身一个敌人，把他扔到一个朋友身上，然后在我变回自己的身体看着他们爆炸之前把他们俩都撞到地雷里——我就完蛋了。</p>]]></content>
    
    
    <summary type="html">如何推销游戏</summary>
    
    
    
    <category term="游戏设计" scheme="https://rorschachandbat.github.io/categories/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
</feed>
